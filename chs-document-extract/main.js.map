{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/component-version/component-version.component.ts","./src/app/component-version/component-version.component.html","./src/app/document-list/document-list.component.ts","./src/app/document-list/document-list.component.html","./src/app/document-tracking/document-tracking.component.ts","./src/app/document-tracking/document-tracking.component.html","./src/app/extract-download/extract-download.component.ts","./src/app/extract-download/extract-download.component.html","./src/app/patient-selection/patient-selection.component.ts","./src/app/patient-selection/patient-selection.component.html","./src/app/services/cerner-action.service.ts","./src/app/services/document-extract.service.ts","./src/app/services/progress-stepper.service.ts","./src/app/shared/progress-stepper/progress-stepper.component.ts","./src/app/shared/progress-stepper/progress-stepper.component.html","./src/app/system-configuration/nested-object-viewer.component.ts","./src/app/system-configuration/nested-object-viewer.component.html","./src/app/system-configuration/system-configuration.component.ts","./src/app/system-configuration/system-configuration.component.html","./src/environments/environment.ts","./src/main.ts","./src/app/version.js"],"sourcesContent":["import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {useHash: true})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { mPageService } from '@clinicaloffice/clinical-office-mpage-core';\nimport { CUSTOM_DATE_FORMATS } from './app.module';\nimport { DocumentExtractService, DmsMediaInstanceRequest } from './services/document-extract.service';\nimport { DocumentTrackingComponent } from './document-tracking/document-tracking.component';\nimport { ProgressStepperService } from './services/progress-stepper.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  @ViewChild(DocumentTrackingComponent) documentTrackingComponent!: DocumentTrackingComponent;\n  \n  loading = true;\n  configLoaded = false;\n  configData: any = null;\n  showBackToTop = false;\n  patientInfo: any = null;\n\n  constructor(\n    public activatedRoute: ActivatedRoute, \n    public mPage: mPageService,\n    private documentService: DocumentExtractService,\n    private progressStepper: ProgressStepperService\n  ) {}\n\n  ngOnInit(): void {\n    // Grab any parameters in the URL (Used in Cerner Components)\n    this.activatedRoute.queryParams.subscribe(params => {\n      this.mPage.personId = params['personId'] ? parseInt(params['personId']) : this.mPage.personId;\n      this.mPage.encntrId = params['encounterId'] ? parseInt(params['encounterId']) : this.mPage.encntrId;\n      this.mPage.prsnlId = params['userId'] ? parseInt(params['userId']) : this.mPage.prsnlId;\n    });\n\n    // Perform MPage Initialization\n    setTimeout((e: any) => {\n      this.mPage.setMaxInstances(4, true, 'ORG', false);\n      \n      // Wait for service to be ready before loading configuration\n      this.waitForServiceReady();\n    }, 0);\n\n    // Setup back to top functionality\n    this.setupBackToTop();\n  }\n\n  async waitForServiceReady(): Promise<void> {\n    while (!this.mPage.serviceReady) {\n      // Polling loop to wait for MPage service initialization\n      // Service readiness is required before making API calls to Cerner\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    \n    // MPage service is now ready for API interactions\n    console.log('MPage service is ready, loading configuration...');\n    \n    // Load configuration data\n    this.loadConfiguration();\n  }\n\n  private loadConfiguration(): void {\n    // Update progress - patient selection step based on URL params\n    if (this.mPage.personId) {\n      this.progressStepper.updateStep('patient', 'completed', undefined, { \n        personId: this.mPage.personId \n      });\n      this.progressStepper.updateStep('discovery', 'active');\n    }\n\n    this.documentService.getConfigData().subscribe({\n      next: (configData) => {\n        console.log('Configuration loaded successfully:', configData);\n        this.configData = configData;\n        this.configLoaded = true;\n        this.loading = false;\n        \n        // Only update discovery step if we have a patient selected\n        // Configuration loading just enables the ability to discover documents\n        if (this.mPage.personId) {\n          this.progressStepper.updateStep('discovery', 'completed');\n        }\n      },\n      error: (error) => {\n        console.error('Failed to load configuration:', error);\n        this.loading = false;\n        // Only mark discovery as error if we have a patient\n        if (this.mPage.personId) {\n          this.progressStepper.updateStep('discovery', 'error');\n        }\n      }\n    });\n  }\n\n  /**\n   * Setup back to top functionality\n   */\n  private setupBackToTop(): void {\n    window.addEventListener('scroll', () => {\n      this.showBackToTop = window.pageYOffset > 400;\n    });\n  }\n\n  /**\n   * Scroll to top of the page\n   */\n  scrollToTop(): void {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }\n\n  /**\n   * Handle patient selection from patient-selection component\n   * @param patientInfo The selected patient information\n   */\n  onPatientSelected(patientInfo: any): void {\n    this.patientInfo = patientInfo;\n    \n    // Update progress stepper\n    this.progressStepper.updateStep('patient', 'completed', undefined, {\n      personId: patientInfo.personId,\n      patientName: patientInfo.patientName\n    });\n    this.progressStepper.updateStepDescription('patient', `${patientInfo.patientName}`);\n    \n    // Update discovery step based on documents\n    if (patientInfo.documents && patientInfo.documents.length > 0) {\n      this.progressStepper.updateStep('discovery', 'completed', undefined, {\n        count: patientInfo.documents.length\n      });\n      this.progressStepper.updateStepDescription('discovery', `${patientInfo.documents.length} documents found`);\n    } else {\n      this.progressStepper.updateStep('discovery', 'active');\n    }\n  }\n\n  /**\n   * Handle download request from document-list component\n   * @param downloadData The download request data\n   */\n  onDownloadRequest(downloadData: {personId: number, encntrId: number, dmsMediaInstanceRequests: DmsMediaInstanceRequest[]}): void {\n    // Update progress stepper to show download step is active\n    this.progressStepper.updateStep('download', 'active', undefined, {\n      count: downloadData.dmsMediaInstanceRequests.length\n    });\n    this.progressStepper.updateStepDescription('download', `Downloading ${downloadData.dmsMediaInstanceRequests.length} files...`);\n    \n    // Pass the download request to the document tracking component\n    if (this.documentTrackingComponent) {\n      this.documentTrackingComponent.handleDownloadRequest(downloadData);\n    }\n  }\n\n}\n","<div class=\"app-container\">\n  <!-- Hidden element for Cerner APPLINK actions -->\n  <a id=\"applink\" href=\"#\" style=\"display: none;\"></a>\n  \n  <app-component-version></app-component-version>\n  \n  <h1>CHS Document Extract</h1>\n  \n  <div class=\"loading-overlay\" *ngIf=\"loading\">\n    <div class=\"loading-content\">\n      <div class=\"loading-spinner\"></div>\n      <p>Initializing application...</p>\n    </div>\n  </div>\n  \n  <div class=\"main-content\" [class.loading]=\"loading\">\n    <!-- Layout with Global Progress Stepper and Content -->\n    <div class=\"content-layout\">\n      <!-- Global Progress Stepper -->\n      <app-progress-stepper></app-progress-stepper>\n      \n      <!-- Main Content Area -->\n      <div class=\"content-area\">\n        <app-patient-selection [configLoaded]=\"configLoaded\" (patientSelected)=\"onPatientSelected($event)\"></app-patient-selection>\n        \n        <app-document-list \n          [documents]=\"patientInfo?.documents || []\" \n          [loading]=\"loading\"\n          [patientInfo]=\"patientInfo\"\n          (downloadRequest)=\"onDownloadRequest($event)\">\n        </app-document-list>\n        \n        <app-document-tracking \n          [currentPatient]=\"patientInfo\"\n          (downloadRequest)=\"onDownloadRequest($event)\">\n        </app-document-tracking>\n        \n        <app-system-configuration [configData]=\"configData\"></app-system-configuration>\n      </div>\n    </div>\n  </div>\n\n  <!-- Back to Top Button -->\n  <div class=\"back-to-top\" \n       [class.visible]=\"showBackToTop\" \n       (click)=\"scrollToTop()\"\n       title=\"Back to top\">\n    <i class=\"back-to-top-icon\">↑</i>\n  </div>\n  \n  <mpage-log-component></mpage-log-component>\n</div>\n","import { NgModule, ErrorHandler, APP_INITIALIZER } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ClinicalOfficeMpageModule, MaterialModule, ErrorHandlerService, ConfigService } from '@clinicaloffice/clinical-office-mpage-core'\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MatLuxonDateModule, LuxonDateAdapter } from '@angular/material-luxon-adapter';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\nimport { ComponentVersionComponent } from './component-version/component-version.component';\nimport { PatientSelectionComponent } from './patient-selection/patient-selection.component';\nimport { DocumentListComponent } from './document-list/document-list.component';\nimport { DocumentTrackingComponent } from './document-tracking/document-tracking.component';\nimport { SystemConfigurationComponent } from './system-configuration/system-configuration.component';\nimport { NestedObjectViewerComponent } from './system-configuration/nested-object-viewer.component';\nimport { ExtractDownloadComponent } from './extract-download/extract-download.component';\nimport { ProgressStepperComponent } from './shared/progress-stepper/progress-stepper.component';\nimport { NZ_I18N } from 'ng-zorro-antd/i18n';\nimport { en_US } from 'ng-zorro-antd/i18n';\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nimport { HttpClientModule } from '@angular/common/http';\n\nregisterLocaleData(en);\n\nexport const configFactory = (configService: ConfigService) => {\n  return () => configService.loadConfig();\n}\n\n// Custom date formats\nexport const CUSTOM_DATE_FORMATS = {\n  parse: {\n    dateInput: ['dd-MMM-yyyy'],\n  },\n  display: {\n    dateInput: 'dd-MMM-yyyy',\n    dateTimeLabel: 'dd-MMM-yyyy HH:mm',\n    monthYearLabel: 'MMM yyyy',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM yyyy',\n  }\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ComponentVersionComponent,\n    PatientSelectionComponent,\n    DocumentListComponent,\n    DocumentTrackingComponent,\n    SystemConfigurationComponent,\n    NestedObjectViewerComponent,\n    ExtractDownloadComponent,\n    ProgressStepperComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ClinicalOfficeMpageModule,\n    MaterialModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatLuxonDateModule,\n    HttpClientModule\n    //    MatMomentDateModule\n  ],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: configFactory,\n      deps: [ConfigService],\n      multi: true\n    },\n    { provide: ErrorHandler, useClass: ErrorHandlerService },\n    { provide: DateAdapter, useClass: LuxonDateAdapter, deps: [MAT_DATE_LOCALE] },\n//    { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'outline' } },\n    {\n      provide: MAT_DATE_FORMATS, useValue: CUSTOM_DATE_FORMATS\n    },\n{ provide: NZ_I18N, useValue: en_US }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import { Component } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n\n@Component({\n  selector: 'app-component-version',\n  templateUrl: './component-version.component.html',\n  styleUrls: ['./component-version.component.scss']\n})\nexport class ComponentVersionComponent {\n\n  currentApplicationVersion = environment.appVersion;\n  packageVersion = environment.packageVersion;\n  gitBranch = environment.gitBranch;\n\n}\n","{{currentApplicationVersion}}","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { PatientDocument, PatientInfo, DmsMediaInstanceRequest, CpdiDocumentRequest } from '../services/document-extract.service';\n\n@Component({\n  selector: 'app-document-list',\n  templateUrl: './document-list.component.html',\n  styleUrls: ['./document-list.component.scss']\n})\nexport class DocumentListComponent implements OnInit {\n  @Input() documents: PatientDocument[] = [];\n  @Input() loading = false;\n  @Input() patientInfo: PatientInfo | null = null;\n  @Output() documentSelectionChange = new EventEmitter<PatientDocument[]>();\n  @Output() downloadRequest = new EventEmitter<{personId: number, encntrId: number, dmsMediaInstanceRequests: DmsMediaInstanceRequest[], cpdiDocumentRequests: CpdiDocumentRequest[]}>();\n\n  selectedDocuments: PatientDocument[] = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Toggles selection of a document\n   * @param document The document to toggle\n   */\n  toggleDocumentSelection(document: PatientDocument): void {\n    console.log('[DocumentListComponent] toggleDocumentSelection() - Toggling document:', document);\n    const index = this.selectedDocuments.findIndex(doc => doc.id === document.id);\n    \n    if (index > -1) {\n      // Remove from selection\n      console.log('[DocumentListComponent] toggleDocumentSelection() - Removing document from selection');\n      this.selectedDocuments.splice(index, 1);\n      document.selected = false;\n    } else {\n      // Add to selection\n      console.log('[DocumentListComponent] toggleDocumentSelection() - Adding document to selection');\n      this.selectedDocuments.push(document);\n      document.selected = true;\n    }\n\n    console.log('[DocumentListComponent] toggleDocumentSelection() - Updated selected documents:', this.selectedDocuments);\n    this.documentSelectionChange.emit(this.selectedDocuments);\n  }\n\n  /**\n   * Selects all documents\n   */\n  selectAll(): void {\n    console.log('[DocumentListComponent] selectAll() - Selecting all documents, count:', this.documents.length);\n    this.documents.forEach(doc => {\n      doc.selected = true;\n    });\n    this.selectedDocuments = [...this.documents];\n    console.log('[DocumentListComponent] selectAll() - All documents selected:', this.selectedDocuments);\n    this.documentSelectionChange.emit(this.selectedDocuments);\n  }\n\n  /**\n   * Deselects all documents\n   */\n  deselectAll(): void {\n    console.log('[DocumentListComponent] deselectAll() - Deselecting all documents');\n    this.documents.forEach(doc => {\n      doc.selected = false;\n    });\n    this.selectedDocuments = [];\n    console.log('[DocumentListComponent] deselectAll() - All documents deselected');\n    this.documentSelectionChange.emit(this.selectedDocuments);\n  }\n\n  /**\n   * Initiates download of selected documents\n   */\n  downloadSelected(): void {\n    console.log('[DocumentListComponent] downloadSelected() - Starting download for selected documents');\n    console.log('[DocumentListComponent] downloadSelected() - Selected documents count:', this.selectedDocuments.length);\n    console.log('[DocumentListComponent] downloadSelected() - Patient info:', this.patientInfo);\n    \n    if (this.selectedDocuments.length > 0 && this.patientInfo) {\n      const dmsDocuments = this.selectedDocuments.filter(doc => doc.sourceType === 'dms');\n      const cpdiDocuments = this.selectedDocuments.filter(doc => doc.sourceType === 'cpdi');\n      \n      const dmsMediaInstanceRequests: DmsMediaInstanceRequest[] = dmsDocuments.map(doc => ({\n        mediaInstanceId: parseInt(doc.id)\n      }));\n      \n      const cpdiDocumentRequests: CpdiDocumentRequest[] = cpdiDocuments.map(doc => ({\n        eventId: parseInt(doc.id),\n        blobHandle: doc.contentUid\n      }));\n      \n      console.log('[DocumentListComponent] downloadSelected() - Created DMS requests:', dmsMediaInstanceRequests);\n      console.log('[DocumentListComponent] downloadSelected() - Created CPDI requests:', cpdiDocumentRequests);\n      \n      const downloadData = {\n        personId: this.patientInfo.personId,\n        encntrId: this.patientInfo.encntrId,\n        dmsMediaInstanceRequests: dmsMediaInstanceRequests,\n        cpdiDocumentRequests: cpdiDocumentRequests\n      };\n      \n      console.log('[DocumentListComponent] downloadSelected() - Emitting download request:', downloadData);\n      this.downloadRequest.emit(downloadData);\n    } else {\n      console.warn('[DocumentListComponent] downloadSelected() - No documents selected or patient info missing');\n    }\n  }\n\n  /**\n   * Checks if all documents are selected\n   */\n  get allSelected(): boolean {\n    return this.documents.length > 0 && this.selectedDocuments.length === this.documents.length;\n  }\n\n  /**\n   * Checks if some documents are selected\n   */\n  get someSelected(): boolean {\n    return this.selectedDocuments.length > 0 && this.selectedDocuments.length < this.documents.length;\n  }\n\n\n} ","<div class=\"document-list-container\">\n  <div class=\"list-header\">\n    <div class=\"header-info\">\n      <h3>Documents</h3>\n      <span class=\"doc-count\" *ngIf=\"documents.length > 0\">{{ documents.length }} found</span>\n      <span class=\"selection-count\" *ngIf=\"selectedDocuments.length > 0\">\n        {{ selectedDocuments.length }} selected\n      </span>\n    </div>\n    <div class=\"header-actions\" *ngIf=\"documents.length > 0\">\n      <button class=\"btn btn-sm btn-outline\" (click)=\"selectAll()\" [disabled]=\"allSelected\">All</button>\n      <button class=\"btn btn-sm btn-outline\" (click)=\"deselectAll()\" [disabled]=\"selectedDocuments.length === 0\">None</button>\n      <button class=\"btn btn-sm btn-primary\" (click)=\"downloadSelected()\" [disabled]=\"selectedDocuments.length === 0\">\n        📥 Download ({{ selectedDocuments.length }})\n      </button>\n    </div>\n  </div>\n\n  <div class=\"loading-container\" *ngIf=\"loading\">\n    <div class=\"loading-spinner\"></div>\n    <p>Loading documents...</p>\n  </div>\n\n  <div class=\"no-documents\" *ngIf=\"!loading && documents.length === 0\">\n    <p>No documents found for this patient.</p>\n  </div>\n\n  <div class=\"documents-grid\" *ngIf=\"!loading && documents.length > 0\">\n    <div class=\"grid-header\">\n      <div class=\"col-select\">\n        <input \n          type=\"checkbox\" \n          [checked]=\"allSelected\"\n          [indeterminate]=\"someSelected\"\n          (change)=\"allSelected ? deselectAll() : selectAll()\"\n        />\n      </div>\n      <div class=\"col-name\">Name</div>\n      <div class=\"col-type\">Type</div>\n      <div class=\"col-date\">Date</div>\n      <div class=\"col-size\">Size</div>\n    </div>\n    <div class=\"grid-body\">\n      <div \n        *ngFor=\"let document of documents\"\n        class=\"doc-row\"\n        [class.selected]=\"document.selected\"\n        (click)=\"toggleDocumentSelection(document)\"\n      >\n        <div class=\"col-select\">\n          <input \n            type=\"checkbox\" \n            [checked]=\"document.selected\"\n            (click)=\"$event.stopPropagation()\"\n            (change)=\"toggleDocumentSelection(document)\"\n          />\n        </div>\n        <div class=\"col-name\" [title]=\"document.documentName\">\n          {{ document.documentName }}\n        </div>\n        <div class=\"col-type\">\n          <span class=\"type-badge\">{{ document.contentTypeDisplay }}</span>\n        </div>\n        <div class=\"col-date\">\n          {{ document.documentDate | date:'MM/dd/yy' }}\n        </div>\n        <div class=\"col-size\">\n          {{ document.documentSize }}\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div> ","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { DocumentExtractService, PatientInfo, DmsMediaInstanceRequest, DownloadDocumentsResponse, SequentialDownloadResponse, DownloadProgress, DownloadedFile, ExtractResponse } from '../services/document-extract.service';\nimport { ProgressStepperService } from '../services/progress-stepper.service';\n\nexport interface DownloadStatus {\n  documentId: string;\n  status: 'pending' | 'downloading' | 'completed' | 'failed';\n  progress?: number;\n  error?: string;\n  filename?: string;\n  documentName?: string;\n  documentType?: string;\n}\n\n@Component({\n  selector: 'app-document-tracking',\n  templateUrl: './document-tracking.component.html',\n  styleUrls: ['./document-tracking.component.scss']\n})\nexport class DocumentTrackingComponent implements OnInit {\n  @Input() currentPatient: PatientInfo | null = null;\n  @Output() downloadRequest = new EventEmitter<{personId: number, encntrId: number, dmsMediaInstanceRequests: DmsMediaInstanceRequest[]}>();\n  \n  downloadQueue: DownloadStatus[] = [];\n  completedDownloads: DownloadStatus[] = [];\n  failedDownloads: DownloadStatus[] = [];\n  isDownloading = false;\n  downloadedFiles: DownloadedFile[] = [];\n  showExtractComponent = false;\n\n  constructor(\n    private documentService: DocumentExtractService,\n    private progressStepper: ProgressStepperService\n  ) { }\n\n  ngOnInit(): void {\n    console.log('[DocumentTrackingComponent] ngOnInit() - Component initialized');\n  }\n\n  /**\n   * Handles download request from parent component\n   * @param downloadData The download request data\n   */\n  handleDownloadRequest(downloadData: {personId: number, encntrId: number, dmsMediaInstanceRequests: DmsMediaInstanceRequest[]}): void {\n    console.log('[DocumentTrackingComponent] handleDownloadRequest() - Received download request:', downloadData);\n    this.startDownload(downloadData.personId, downloadData.encntrId, downloadData.dmsMediaInstanceRequests);\n  }\n\n  /**\n   * Clears all download state to start fresh\n   */\n  private clearDownloadState(): void {\n    console.log('[DocumentTrackingComponent] clearDownloadState() - Clearing all download state');\n    this.downloadQueue = [];\n    this.completedDownloads = [];\n    this.failedDownloads = [];\n    this.downloadedFiles = [];\n    this.showExtractComponent = false;\n  }\n\n  /**\n   * Starts the download process for selected documents\n   * @param personId The patient's person ID\n   * @param encntrId The patient's encounter ID\n   * @param dmsMediaInstanceRequests Array of document media instance requests to download\n   */\n  startDownload(personId: number, encntrId: number, dmsMediaInstanceRequests: DmsMediaInstanceRequest[]): void {\n    console.log('[DocumentTrackingComponent] startDownload() - Starting download process with parameters:', {\n      personId,\n      encntrId,\n      requestCount: dmsMediaInstanceRequests.length,\n      requests: dmsMediaInstanceRequests\n    });\n    \n    if (dmsMediaInstanceRequests.length === 0) {\n      console.warn('[DocumentTrackingComponent] startDownload() - No download requests provided');\n      return;\n    }\n\n    // Clear previous download state\n    this.clearDownloadState();\n    \n    this.isDownloading = true;\n    console.log('[DocumentTrackingComponent] startDownload() - Set isDownloading to true');\n    \n    // Initialize download queue\n    this.downloadQueue = dmsMediaInstanceRequests.map(request => ({\n      documentId: request.mediaInstanceId.toString(),\n      status: 'pending' as const\n    }));\n    \n    console.log('[DocumentTrackingComponent] startDownload() - Initialized download queue:', this.downloadQueue);\n\n    // Start the sequential download process\n    console.log('[DocumentTrackingComponent] startDownload() - Calling document service for sequential download');\n    this.documentService.downloadDocumentsSequentially(personId, encntrId, dmsMediaInstanceRequests).subscribe({\n      next: (response: SequentialDownloadResponse) => {\n        console.log('[DocumentTrackingComponent] startDownload() - Received sequential download response:', response);\n        this.handleSequentialDownloadResponse(response);\n      },\n      error: (error) => {\n        console.error('[DocumentTrackingComponent] startDownload() - Sequential download error:', error);\n        this.handleDownloadError(error);\n      }\n    });\n  }\n\n  /**\n   * Handles sequential download response with progress updates\n   * @param response The sequential download response from the service\n   */\n  private handleSequentialDownloadResponse(response: SequentialDownloadResponse): void {\n    console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Processing sequential download response:', response);\n    \n    const { progress, isComplete, allResults } = response;\n    \n    // Update progress for current download\n    if (progress.current) {\n      console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Processing current download:', progress.current);\n      const queueItem = this.downloadQueue.find(item => \n        item.documentId === progress.current!.mediaInstanceId.toString()\n      );\n      \n      if (queueItem) {\n        console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Found queue item for current download:', queueItem);\n        queueItem.status = 'downloading';\n        queueItem.progress = 50; // Indicate download in progress\n      }\n    }\n    \n    // Process completed results\n    allResults.forEach((result, index) => {\n      console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Processing result:', result);\n      const queueItem = this.downloadQueue.find(item => \n        item.documentId === result.mediaInstanceId.toString()\n      );\n\n      if (queueItem) {\n        console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Found queue item for result:', queueItem);\n        \n        // Update queue item with result details\n        queueItem.filename = result.filename;\n        queueItem.documentName = result.documentName;\n        queueItem.documentType = result.documentType;\n        \n        if (result.status === 1) {\n          // Download successful\n          console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Download successful for:', result.mediaInstanceId);\n          queueItem.status = 'completed';\n          queueItem.progress = 100;\n          this.moveToCompleted(queueItem);\n          \n          // Add to downloaded files for extract\n          if (result.fullpath && result.filename) {\n            const downloadedFile: DownloadedFile = {\n              filename: result.filename,\n              fullpath: result.fullpath,\n              documentName: result.documentName,\n              documentType: result.documentType,\n              mediaInstanceId: result.mediaInstanceId\n            };\n            \n            // Check if this file is already in the downloaded files list to prevent duplicates\n            const existingFile = this.downloadedFiles.find(file => \n              file.mediaInstanceId === result.mediaInstanceId\n            );\n            \n            if (!existingFile) {\n              this.downloadedFiles.push(downloadedFile);\n              console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Added to downloaded files:', downloadedFile);\n            } else {\n              console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - File already exists in downloaded files, skipping:', result.mediaInstanceId);\n            }\n          }\n        } else {\n          // Download failed\n          console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Download failed for:', result.mediaInstanceId, 'Error:', result.message);\n          queueItem.status = 'failed';\n          queueItem.error = result.message;\n          this.moveToFailed(queueItem);\n        }\n      } else {\n        console.warn('[DocumentTrackingComponent] handleSequentialDownloadResponse() - No queue item found for mediaInstanceId:', result.mediaInstanceId);\n      }\n    });\n\n    // Check if all downloads are complete\n    if (isComplete) {\n      console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - All downloads completed. Progress:', progress);\n      console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Setting isDownloading to false and clearing queue');\n      this.isDownloading = false;\n      this.downloadQueue = [];\n      \n      // Update progress stepper\n      this.progressStepper.updateStep('download', 'completed', undefined, {\n        count: this.downloadedFiles.length\n      });\n      this.progressStepper.updateStepDescription('download', `${this.downloadedFiles.length} files downloaded`);\n      \n      // Show extract component if we have downloaded files\n      if (this.downloadedFiles.length > 0) {\n        console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Showing extract component with', this.downloadedFiles.length, 'files');\n        this.showExtractComponent = true;\n      }\n      \n      // Log final summary\n      console.log('[DocumentTrackingComponent] handleSequentialDownloadResponse() - Download Summary:', {\n        total: progress.total,\n        completed: progress.completed,\n        failed: progress.failed,\n        successRate: progress.total > 0 ? (progress.completed / progress.total * 100).toFixed(1) + '%' : '0%',\n        downloadedFilesCount: this.downloadedFiles.length\n      });\n    }\n  }\n\n  /**\n   * Handles extract completion\n   * @param extractResponse The extract response\n   */\n  handleExtractComplete(extractResponse: ExtractResponse): void {\n    console.log('[DocumentTrackingComponent] handleExtractComplete() - Extract completed:', extractResponse);\n    \n    // Update progress stepper for extract step\n    if (extractResponse.success) {\n      this.progressStepper.updateStep('extract', 'completed', undefined, {\n        fileName: extractResponse.zipFileName\n      });\n      this.progressStepper.updateStepDescription('extract', `ZIP created: ${extractResponse.zipFileName}`);\n      \n      // Activate final download step\n      this.progressStepper.updateStep('complete', 'active');\n    } else {\n      this.progressStepper.updateStep('extract', 'error');\n    }\n  }\n\n\n  /**\n   * Handles download errors\n   * @param error The error from the download service\n   */\n  private handleDownloadError(error: any): void {\n    console.error('[DocumentTrackingComponent] handleDownloadError() - Download error:', error);\n    \n    // Mark all pending items as failed\n    console.log('[DocumentTrackingComponent] handleDownloadError() - Marking all pending items as failed');\n    this.downloadQueue.forEach(item => {\n      if (item.status === 'pending' || item.status === 'downloading') {\n        console.log('[DocumentTrackingComponent] handleDownloadError() - Marking item as failed:', item);\n        item.status = 'failed';\n        item.error = 'Download failed';\n        this.moveToFailed(item);\n      }\n    });\n\n    console.log('[DocumentTrackingComponent] handleDownloadError() - Setting isDownloading to false and clearing queue');\n    this.isDownloading = false;\n    this.downloadQueue = [];\n  }\n\n  /**\n   * Moves a completed download to the completed list\n   * @param item The completed download item\n   */\n  private moveToCompleted(item: DownloadStatus): void {\n    console.log('[DocumentTrackingComponent] moveToCompleted() - Moving item to completed list:', item);\n    \n    // Check if this item is already in the completed list to prevent duplicates\n    const existingItem = this.completedDownloads.find(completed => \n      completed.documentId === item.documentId\n    );\n    \n    if (existingItem) {\n      console.log('[DocumentTrackingComponent] moveToCompleted() - Item already exists in completed list, skipping:', item.documentId);\n      return;\n    }\n    \n    this.completedDownloads.push(item);\n    console.log('[DocumentTrackingComponent] moveToCompleted() - Completed downloads count:', this.completedDownloads.length);\n  }\n\n  /**\n   * Moves a failed download to the failed list\n   * @param item The failed download item\n   */\n  private moveToFailed(item: DownloadStatus): void {\n    console.log('[DocumentTrackingComponent] moveToFailed() - Moving item to failed list:', item);\n    \n    // Check if this item is already in the failed list to prevent duplicates\n    const existingItem = this.failedDownloads.find(failed => \n      failed.documentId === item.documentId\n    );\n    \n    if (existingItem) {\n      console.log('[DocumentTrackingComponent] moveToFailed() - Item already exists in failed list, skipping:', item.documentId);\n      return;\n    }\n    \n    this.failedDownloads.push(item);\n    console.log('[DocumentTrackingComponent] moveToFailed() - Failed downloads count:', this.failedDownloads.length);\n  }\n\n  /**\n   * Retries a failed download\n   * @param item The failed download item to retry\n   */\n  retryDownload(item: DownloadStatus): void {\n    console.log('[DocumentTrackingComponent] retryDownload() - Retrying download for item:', item);\n    \n    if (!this.currentPatient) {\n      console.error('[DocumentTrackingComponent] retryDownload() - No current patient available for retry');\n      return;\n    }\n\n    // Remove from failed list\n    const index = this.failedDownloads.findIndex(failed => failed.documentId === item.documentId);\n    if (index > -1) {\n      console.log('[DocumentTrackingComponent] retryDownload() - Removing item from failed list');\n      this.failedDownloads.splice(index, 1);\n    }\n\n    // Add to download queue\n    console.log('[DocumentTrackingComponent] retryDownload() - Adding item to download queue');\n    this.downloadQueue.push({\n      documentId: item.documentId,\n      status: 'pending'\n    });\n\n    // Create download request for this single item\n    const retryRequest: DmsMediaInstanceRequest = {\n      mediaInstanceId: parseInt(item.documentId)\n    };\n    console.log('[DocumentTrackingComponent] retryDownload() - Created retry request:', retryRequest);\n\n    // Start sequential download for this single item using current patient context\n    console.log('[DocumentTrackingComponent] retryDownload() - Starting sequential download with current patient context');\n    this.startDownload(this.currentPatient.personId, this.currentPatient.encntrId, [retryRequest]);\n  }\n\n  /**\n   * Clears completed downloads\n   */\n  clearCompleted(): void {\n    this.completedDownloads = [];\n  }\n\n  /**\n   * Clears failed downloads\n   */\n  clearFailed(): void {\n    this.failedDownloads = [];\n  }\n\n  /**\n   * Gets the status text for display\n   * @param status The download status\n   * @returns Status text\n   */\n  getStatusText(status: string): string {\n    switch (status) {\n      case 'pending': return 'Pending';\n      case 'downloading': return 'Downloading';\n      case 'completed': return 'Completed';\n      case 'failed': return 'Failed';\n      default: return 'Unknown';\n    }\n  }\n\n  /**\n   * Gets the status class for styling\n   * @param status The download status\n   * @returns CSS class name\n   */\n  getStatusClass(status: string): string {\n    switch (status) {\n      case 'pending': return 'status-pending';\n      case 'downloading': return 'status-downloading';\n      case 'completed': return 'status-completed';\n      case 'failed': return 'status-failed';\n      default: return 'status-unknown';\n    }\n  }\n\n  /**\n   * Gets the current download progress percentage\n   * @returns Progress percentage as a number\n   */\n  getDownloadProgress(): number {\n    if (this.downloadQueue.length === 0) return 0;\n    \n    const totalItems = this.downloadQueue.length;\n    const completedItems = this.downloadQueue.filter(item => item.status === 'completed').length;\n    const failedItems = this.downloadQueue.filter(item => item.status === 'failed').length;\n    \n    return Math.round(((completedItems + failedItems) / totalItems) * 100);\n  }\n\n  /**\n   * Gets the current download status text\n   * @returns Status text for display\n   */\n  getCurrentDownloadStatus(): string {\n    if (!this.isDownloading) return 'No downloads in progress';\n    \n    const totalItems = this.downloadQueue.length;\n    const completedItems = this.downloadQueue.filter(item => item.status === 'completed').length;\n    const failedItems = this.downloadQueue.filter(item => item.status === 'failed').length;\n    const downloadingItems = this.downloadQueue.filter(item => item.status === 'downloading').length;\n    const pendingItems = this.downloadQueue.filter(item => item.status === 'pending').length;\n    \n    if (downloadingItems > 0) {\n      const downloadingItem = this.downloadQueue.find(item => item.status === 'downloading');\n      return `Downloading: ${downloadingItem?.documentName || 'Document'} (${completedItems + failedItems + 1}/${totalItems})`;\n    }\n    \n    return `Processing: ${completedItems + failedItems}/${totalItems} completed`;\n  }\n} ","<div class=\"document-tracking-container\">\n  <!-- Compact Header with Status -->\n  <div class=\"tracking-header\">\n    <div class=\"header-info\">\n      <h3>Download Progress</h3>\n      <div class=\"status-indicators\">\n        <span class=\"queue-count\" *ngIf=\"downloadQueue.length > 0\">\n          {{ downloadQueue.length }} active\n        </span>\n        <span class=\"completed-count\" *ngIf=\"completedDownloads.length > 0\">\n          {{ completedDownloads.length }} done\n        </span>\n        <span class=\"failed-count\" *ngIf=\"failedDownloads.length > 0\">\n          {{ failedDownloads.length }} failed\n        </span>\n      </div>\n    </div>\n    <!-- Fixed Height Progress Area -->\n    <div class=\"progress-area\">\n      <div class=\"progress-overview\" *ngIf=\"isDownloading\">\n        <div class=\"progress-bar-overall\">\n          <div class=\"progress-fill-overall\" [style.width.%]=\"getDownloadProgress()\"></div>\n        </div>\n        <span class=\"progress-text\">{{ getCurrentDownloadStatus() }} ({{ getDownloadProgress() }}%)</span>\n      </div>\n    </div>\n  </div>\n\n  <!-- Main Content Grid -->\n  <div class=\"main-grid\">\n    <!-- Active Downloads -->\n    <div class=\"downloads-section\" *ngIf=\"downloadQueue.length > 0\">\n      <div class=\"section-title\">\n        <h4>Active ({{ downloadQueue.length }})</h4>\n      </div>\n      <div class=\"compact-download-list\">\n        <div \n          *ngFor=\"let item of downloadQueue\" \n          class=\"compact-download-item\"\n          [class]=\"getStatusClass(item.status)\"\n        >\n          <div class=\"item-info\">\n            <div class=\"doc-name\" [title]=\"item.documentName || item.documentId\">\n              {{ item.documentName || item.documentId }}\n            </div>\n            <div class=\"doc-meta\">\n              <span class=\"status-badge\">{{ getStatusText(item.status) }}</span>\n              <span class=\"doc-type\" *ngIf=\"item.documentType\">{{ item.documentType }}</span>\n            </div>\n          </div>\n          <div class=\"item-progress\" *ngIf=\"item.status === 'downloading'\">\n            <div class=\"mini-progress\">\n              <div class=\"mini-fill\" [style.width.%]=\"item.progress || 0\"></div>\n            </div>\n            <span class=\"progress-pct\">{{ item.progress || 0 }}%</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Completed Downloads -->\n    <div class=\"downloads-section\" *ngIf=\"completedDownloads.length > 0\">\n      <div class=\"section-title\">\n        <h4>Completed ({{ completedDownloads.length }})</h4>\n        <button class=\"btn btn-xs btn-outline\" (click)=\"clearCompleted()\">Clear</button>\n      </div>\n      <div class=\"compact-download-list completed\">\n        <div \n          *ngFor=\"let item of completedDownloads\" \n          class=\"compact-download-item status-completed\"\n        >\n          <div class=\"item-info\">\n            <div class=\"doc-name\" [title]=\"item.documentName || item.documentId\">\n              {{ item.documentName || item.documentId }}\n            </div>\n            <div class=\"doc-meta\">\n              <span class=\"filename\" *ngIf=\"item.filename\">{{ item.filename }}</span>\n            </div>\n          </div>\n          <div class=\"item-status\">\n            <span class=\"checkmark\">✓</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Failed Downloads -->\n    <div class=\"downloads-section\" *ngIf=\"failedDownloads.length > 0\">\n      <div class=\"section-title\">\n        <h4>Failed ({{ failedDownloads.length }})</h4>\n        <button class=\"btn btn-xs btn-outline\" (click)=\"clearFailed()\">Clear</button>\n      </div>\n      <div class=\"compact-download-list failed\">\n        <div \n          *ngFor=\"let item of failedDownloads\" \n          class=\"compact-download-item status-failed\"\n        >\n          <div class=\"item-info\">\n            <div class=\"doc-name\" [title]=\"item.documentName || item.documentId\">\n              {{ item.documentName || item.documentId }}\n            </div>\n            <div class=\"doc-meta\">\n              <span class=\"error-msg\" *ngIf=\"item.error\" [title]=\"item.error\">\n                {{ item.error }}\n              </span>\n            </div>\n          </div>\n          <div class=\"item-actions\">\n            <button class=\"btn btn-xs btn-retry\" (click)=\"retryDownload(item)\">\n              ↻ Retry\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Extract Download Component -->\n  <div class=\"extract-section\" *ngIf=\"showExtractComponent && currentPatient\">\n    <app-extract-download\n      [personId]=\"currentPatient.personId\"\n      [encntrId]=\"currentPatient.encntrId\"\n      [downloadedFiles]=\"downloadedFiles\"\n      (extractComplete)=\"handleExtractComplete($event)\"\n    ></app-extract-download>\n  </div>\n\n  <!-- No Activity Message -->\n  <div class=\"no-activity\" *ngIf=\"downloadQueue.length === 0 && completedDownloads.length === 0 && failedDownloads.length === 0 && !showExtractComponent\">\n    <p>📋 No download activity</p>\n    <small>Select documents to start downloading</small>\n  </div>\n</div> ","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { DocumentExtractService, ExtractRequest, DownloadedFile, ExtractResponse } from '../services/document-extract.service';\nimport { ProgressStepperService } from '../services/progress-stepper.service';\n\n// Declare global functions that may be available in MPage environment\ndeclare global {\n  interface Window {\n    MPAGES_SVC_AUTH?: (xhr: XMLHttpRequest) => Promise<any>;\n    g_ExtractDownloadXMLHttpRequestObj?: XMLHttpRequest;\n    showSaveFilePicker?: (options?: {\n      suggestedName?: string;\n      types?: Array<{\n        description: string;\n        accept: Record<string, string[]>;\n      }>;\n    }) => Promise<FileSystemFileHandle>;\n  }\n  \n  interface FileSystemFileHandle {\n    createWritable(): Promise<FileSystemWritableFileStream>;\n  }\n  \n  interface FileSystemWritableFileStream {\n    write(data: any): Promise<void>;\n    close(): Promise<void>;\n  }\n}\n\n@Component({\n  selector: 'app-extract-download',\n  templateUrl: './extract-download.component.html',\n  styleUrls: ['./extract-download.component.scss']\n})\nexport class ExtractDownloadComponent implements OnInit {\n  @Input() personId: number = 0;\n  @Input() encntrId: number = 0;\n  @Input() downloadedFiles: DownloadedFile[] = [];\n  @Output() extractComplete = new EventEmitter<ExtractResponse>();\n\n  isExtracting = false;\n  extractProgress = 0;\n  extractStatus = '';\n  extractResult: ExtractResponse | null = null;\n\n  constructor(\n    private documentService: DocumentExtractService,\n    private progressStepper: ProgressStepperService\n  ) { }\n\n  ngOnInit(): void {\n    console.log('[ExtractDownloadComponent] ngOnInit() - Component initialized with:', {\n      personId: this.personId,\n      encntrId: this.encntrId,\n      downloadedFilesCount: this.downloadedFiles.length\n    });\n  }\n\n  /**\n   * TrackBy function for ngFor optimization\n   * @param index The index of the item\n   * @param file The file object\n   * @returns The filename as the track key\n   */\n  trackByFilename(index: number, file: DownloadedFile): string {\n    return file.filename;\n  }\n\n  /**\n   * Starts the extract process to create metadata file and zip archive\n   */\n  startExtract(): void {\n    console.log('[ExtractDownloadComponent] startExtract() - Starting extract process');\n    \n    if (this.downloadedFiles.length === 0) {\n      console.warn('[ExtractDownloadComponent] startExtract() - No downloaded files available for extract');\n      return;\n    }\n\n    this.isExtracting = true;\n    this.extractProgress = 0;\n    this.extractStatus = 'Preparing extract request...';\n    this.extractResult = null;\n\n    // Update progress stepper\n    this.progressStepper.updateStep('extract', 'active', 0);\n\n    console.log('[ExtractDownloadComponent] startExtract() - Creating extract request with files:', this.downloadedFiles);\n\n    // Create the extract request\n    const extractRequest: ExtractRequest = {\n      personId: this.personId,\n      encntrId: this.encntrId,\n      downloadedFiles: this.downloadedFiles\n    };\n\n    this.extractStatus = 'Sending extract request to server...';\n    this.extractProgress = 25;\n    this.progressStepper.updateStep('extract', 'active', 25);\n\n    this.documentService.createExtract(extractRequest).subscribe({\n      next: (response: ExtractResponse) => {\n        console.log('[ExtractDownloadComponent] startExtract() - Received extract response:', response);\n        this.handleExtractResponse(response);\n      },\n      error: (error: any) => {\n        console.error('[ExtractDownloadComponent] startExtract() - Extract error:', error);\n        this.handleExtractError(error);\n      }\n    });\n  }\n\n  /**\n   * Handles successful extract response\n   * @param response The extract response from the service\n   */\n  private handleExtractResponse(response: ExtractResponse): void {\n    console.log('[ExtractDownloadComponent] handleExtractResponse() - Processing extract response:', response);\n    \n    this.extractProgress = 100;\n    this.extractStatus = response.success ? 'Extract completed successfully!' : 'Extract failed';\n    this.extractResult = response;\n    this.isExtracting = false;\n    \n    // Update progress stepper\n    this.progressStepper.updateStep('extract', 'active', 100);\n\n    if (response.success) {\n      console.log('[ExtractDownloadComponent] handleExtractResponse() - Extract successful, emitting result');\n      this.extractComplete.emit(response);\n    }\n  }\n\n  /**\n   * Handles extract errors\n   * @param error The error from the extract service\n   */\n  private handleExtractError(error: any): void {\n    console.error('[ExtractDownloadComponent] handleExtractError() - Extract error:', error);\n    \n    this.extractProgress = 0;\n    this.extractStatus = 'Extract failed';\n    this.extractResult = {\n      success: false,\n      message: error.message || 'Extract process failed'\n    };\n    this.isExtracting = false;\n  }\n\n\n  /**\n   * Downloads the created zip file using MPAGES_SVC_AUTH\n   * This method follows the pattern from mediagallery-o1.js for Edge authentication\n   */\n  async downloadWithMPagesAuth(): Promise<void> {\n    if (!this.extractResult?.downloadUrl) {\n      console.warn('[ExtractDownloadComponent] downloadWithMPagesAuth() - No downloadUrl available');\n      alert('No download URL available.');\n      return;\n    }\n\n    console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - Starting MPages authenticated download');\n    console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - Download URL:', this.extractResult.downloadUrl);\n    console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - Extract Result:', this.extractResult);\n    \n    try {\n      // Use the downloadUrl from the service\n      const downloadUrl = this.extractResult.downloadUrl;\n      \n      // Create XMLHttpRequest for authenticated download\n      const xhr = new XMLHttpRequest();\n      \n      // Open the request\n      xhr.open('GET', downloadUrl);\n      \n      // Set response type to blob for binary data\n      xhr.responseType = 'blob';\n      \n      // Apply MPAGES_SVC_AUTH if available (from discern meta declarations)\n      let authPromise = Promise.resolve();\n      \n      if (window.MPAGES_SVC_AUTH) {\n        console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - Applying MPAGES_SVC_AUTH');\n        authPromise = window.MPAGES_SVC_AUTH(xhr);\n      } else {\n        console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - MPAGES_SVC_AUTH not available');\n      }\n      \n      // Wait for authentication to complete\n      await authPromise;\n      \n      // Create promise for the download\n      const downloadPromise = new Promise<void>((resolve, reject) => {\n        xhr.onload = () => {\n          if (xhr.status === 200) {\n            console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - Download successful');\n            \n            // Get the blob response and ensure it has the correct MIME type\n            const originalBlob = xhr.response as Blob;\n            const blob = new Blob([originalBlob], { type: 'application/zip' });\n            \n            // Use the descriptive filename from the extract response\n            let filename = this.extractResult?.zipFileName || 'extracted_documents.zip';\n            \n            console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - Original filename:', this.extractResult?.zipFileName);\n            console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - Filename before extension check:', filename);\n            \n            // Ensure filename has .zip extension\n            if (!filename.toLowerCase().endsWith('.zip')) {\n              filename += '.zip';\n            }\n            \n            console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - Final filename:', filename);\n            console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - Blob size:', blob.size);\n            console.log('[ExtractDownloadComponent] downloadWithMPagesAuth() - Blob type (corrected):', blob.type);\n            \n            // Create a temporary URL for the blob\n            const url = window.URL.createObjectURL(blob);\n            \n            // Create a download link\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = filename;\n            \n            // In Edge/Chrome, we can use the File System Access API for save dialog\n            if ('showSaveFilePicker' in window) {\n              this.saveWithFileSystemAPI(blob, filename)\n                .then(() => resolve())\n                .catch(() => {\n                  // Fallback to standard download\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n                  window.URL.revokeObjectURL(url);\n                  resolve();\n                });\n            } else {\n              // Standard download\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n              window.URL.revokeObjectURL(url);\n              resolve();\n            }\n          } else {\n            console.error('[ExtractDownloadComponent] downloadWithMPagesAuth() - Download failed with status:', xhr.status);\n            reject(new Error(`Download failed with status: ${xhr.status}`));\n          }\n        };\n        \n        xhr.onerror = () => {\n          console.error('[ExtractDownloadComponent] downloadWithMPagesAuth() - Network error during download');\n          reject(new Error('Network error during download'));\n        };\n        \n        // Send the request\n        xhr.send();\n      });\n      \n      await downloadPromise;\n      \n      // Mark final download step as completed\n      this.progressStepper.updateStep('complete', 'completed');\n      this.progressStepper.updateStepDescription('complete', 'ZIP file saved to device');\n      \n    } catch (error) {\n      console.error('[ExtractDownloadComponent] downloadWithMPagesAuth() - Error:', error);\n      this.progressStepper.updateStep('complete', 'error');\n      alert('Download failed. Please try another method.');\n    }\n  }\n\n  /**\n   * Uses the File System Access API to show a save dialog\n   * @param blob The blob to save\n   * @param suggestedName The suggested filename\n   */\n  private async saveWithFileSystemAPI(blob: Blob, suggestedName: string): Promise<void> {\n    try {\n      // Request file handle with save dialog\n      const handle = await (window as any).showSaveFilePicker({\n        suggestedName: suggestedName,\n        types: [{\n          description: 'Zip files',\n          accept: {\n            'application/zip': ['.zip']\n          }\n        }]\n      });\n      \n      // Create a writable stream\n      const writable = await handle.createWritable();\n      \n      // Write the blob to the file\n      await writable.write(blob);\n      \n      // Close the file\n      await writable.close();\n      \n      console.log('[ExtractDownloadComponent] saveWithFileSystemAPI() - File saved successfully');\n    } catch (error) {\n      if ((error as any).name === 'AbortError') {\n        console.log('[ExtractDownloadComponent] saveWithFileSystemAPI() - User cancelled save dialog');\n      } else {\n        console.error('[ExtractDownloadComponent] saveWithFileSystemAPI() - Error:', error);\n      }\n      throw error;\n    }\n  }\n\n\n\n  /**\n   * Gets the extract button text based on current state\n   * @returns Button text\n   */\n  getExtractButtonText(): string {\n    if (this.isExtracting) {\n      return 'Creating Extract...';\n    }\n    return 'Create Extract';\n  }\n\n  /**\n   * Gets the extract status text for display\n   * @returns Status text\n   */\n  getExtractStatusText(): string {\n    if (this.isExtracting) {\n      return `${this.extractStatus} (${this.extractProgress}%)`;\n    }\n    if (this.extractResult) {\n      return this.extractResult.success ? 'Extract completed successfully!' : 'Extract failed';\n    }\n    return 'Ready to create extract';\n  }\n\n  /**\n   * Gets the CSS class for the extract status\n   * @returns CSS class name\n   */\n  getExtractStatusClass(): string {\n    if (this.isExtracting) {\n      return 'status-extracting';\n    }\n    if (this.extractResult) {\n      return this.extractResult.success ? 'status-success' : 'status-failed';\n    }\n    return 'status-ready';\n  }\n\n  /**\n   * Checks if the extract button should be disabled\n   * @returns True if button should be disabled\n   */\n  isExtractButtonDisabled(): boolean {\n    return this.isExtracting || this.downloadedFiles.length === 0;\n  }\n\n  /**\n   * Checks if the download button should be shown\n   * @returns True if download button should be shown\n   */\n  shouldShowDownloadButton(): boolean {\n    return this.extractResult?.success === true && !!this.extractResult.zipFileUrl;\n  }\n\n  /**\n   * Gets the download button text with filename\n   * @returns Download button text\n   */\n  getDownloadButtonText(): string {\n    if (this.extractResult?.zipFileName) {\n      return `📥 Download ${this.extractResult.zipFileName}`;\n    }\n    return '📥 Download Zip File';\n  }\n\n  /**\n   * Checks if MPage authentication is available\n   * @returns True if MPAGES_SVC_AUTH is available\n   */\n  isMPageAuthAvailable(): boolean {\n    return typeof window.MPAGES_SVC_AUTH === 'function';\n  }\n\n  /**\n   * Downloads the extract file using the fileTransfer/retrieveFile endpoint\n   */\n  downloadWithFileTransfer(): void {\n    if (this.extractResult?.zipFileName) {\n      console.log('[ExtractDownloadComponent] downloadWithFileTransfer() - Starting fileTransfer download');\n      \n      // Use the actual fileName and nodeName from the response if available\n      // Otherwise fall back to using zipFileName for both\n      const fileName = this.extractResult.fileName || this.extractResult.zipFileName;\n      const nodeName = this.extractResult.nodeName || this.extractResult.zipFileName;\n      \n      console.log('[ExtractDownloadComponent] downloadWithFileTransfer() - Using parameters:', { fileName, nodeName });\n      \n      this.documentService.downloadExtractFile(fileName, nodeName).subscribe({\n        next: (blob: Blob) => {\n          console.log('[ExtractDownloadComponent] downloadWithFileTransfer() - Download successful');\n          \n          // Ensure proper filename with .zip extension\n          let downloadFileName = fileName;\n          if (!downloadFileName.toLowerCase().endsWith('.zip')) {\n            downloadFileName += '.zip';\n          }\n          \n          // Create blob with correct MIME type\n          const zipBlob = new Blob([blob], { type: 'application/zip' });\n          \n          // Create download link for the blob\n          const url = window.URL.createObjectURL(zipBlob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = downloadFileName;\n          link.style.display = 'none';\n          \n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          \n          // Clean up the object URL\n          window.URL.revokeObjectURL(url);\n          \n          console.log('[ExtractDownloadComponent] downloadWithFileTransfer() - File download initiated for:', downloadFileName);\n        },\n        error: (error) => {\n          console.error('[ExtractDownloadComponent] downloadWithFileTransfer() - Download error:', error);\n          alert('FileTransfer download failed. Please try the other download methods.');\n        }\n      });\n    } else {\n      console.warn('[ExtractDownloadComponent] downloadWithFileTransfer() - No zipFileName available');\n      alert('No file information available for download.');\n    }\n  }\n\n  /**\n   * Checks if the fileTransfer download button should be shown\n   * @returns True if fileTransfer button should be shown\n   */\n  shouldShowFileTransferButton(): boolean {\n    return this.extractResult?.success === true && !!this.extractResult.zipFileName;\n  }\n\n} ","<div class=\"extract-download-container\">\n  <!-- Main Controls Row -->\n  <div class=\"main-controls\">\n    <div class=\"control-section\">\n      <h3>Extract & Download</h3>\n      <div class=\"status-and-controls\">\n        <!-- Fixed Height Status Area -->\n        <div class=\"status-area\">\n          <div class=\"extract-status\" [class]=\"getExtractStatusClass()\">\n            <span class=\"status-icon\">\n              <span *ngIf=\"isExtracting\" class=\"spinner\">⏳</span>\n              <span *ngIf=\"!isExtracting && extractResult?.success\" class=\"success-icon\">✓</span>\n              <span *ngIf=\"!isExtracting && extractResult && !extractResult.success\" class=\"error-icon\">✗</span>\n              <span *ngIf=\"!isExtracting && !extractResult\" class=\"ready-icon\">📁</span>\n            </span>\n            <span class=\"status-text\">{{ getExtractStatusText() }}</span>\n          </div>\n          <!-- Fixed Height Progress Area -->\n          <div class=\"progress-area\">\n            <div class=\"progress-bar\" *ngIf=\"isExtracting\">\n              <div class=\"progress-fill\" [style.width.%]=\"extractProgress\"></div>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Action Buttons -->\n        <div class=\"action-buttons\">\n          <button \n            class=\"btn btn-primary btn-sm\" \n            [disabled]=\"isExtractButtonDisabled()\"\n            (click)=\"startExtract()\"\n          >\n            {{ getExtractButtonText() }}\n          </button>\n          <button \n            *ngIf=\"shouldShowDownloadButton()\"\n            class=\"btn btn-success btn-sm\" \n            (click)=\"downloadWithMPagesAuth()\"\n            title=\"Download ZIP file\"\n          >\n            📥 Download\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Compact File Summary -->\n    <div class=\"files-section\" *ngIf=\"downloadedFiles.length > 0\">\n      <div class=\"files-header\">\n        <h4>Files ({{ downloadedFiles.length }})</h4>\n        <div class=\"auth-indicator\" *ngIf=\"shouldShowDownloadButton()\">\n          <span *ngIf=\"isMPageAuthAvailable()\" class=\"auth-ok\">🔐</span>\n          <span *ngIf=\"!isMPageAuthAvailable()\" class=\"auth-alt\">⚠️</span>\n        </div>\n      </div>\n      <div class=\"compact-file-list\">\n        <div \n          *ngFor=\"let file of downloadedFiles; trackBy: trackByFilename\" \n          class=\"compact-file-item\"\n          [title]=\"file.filename\"\n        >\n          <div class=\"file-main\">\n            <span class=\"file-type\">{{ file.documentType }}</span>\n            <span class=\"file-name\">{{ file.documentName || file.filename }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Extract Info (only when complete) -->\n    <div class=\"extract-info\" *ngIf=\"extractResult?.success\">\n      <div class=\"info-grid\">\n        <div class=\"info-item\">\n          <strong>ZIP:</strong> {{ extractResult?.zipFileName || 'extracted_documents.zip' }}\n        </div>\n        <div class=\"info-item\" *ngIf=\"extractResult?.extractInfo?.fileCount\">\n          <strong>Files:</strong> {{ extractResult?.extractInfo?.fileCount }}\n        </div>\n        <div class=\"info-item\" *ngIf=\"extractResult?.metadataFile\">\n          <strong>Metadata:</strong> {{ extractResult?.metadataFile }}\n        </div>\n      </div>\n    </div>\n\n  <!-- No Files Message -->\n  <div class=\"no-files\" *ngIf=\"downloadedFiles.length === 0\">\n    <p>📄 No files ready for extract</p>\n    <small>Complete document downloads first</small>\n  </div>\n</div> ","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { DocumentExtractService, PatientInfo, PatientSearchResult } from '../services/document-extract.service';\nimport { CernerActionService } from '../services/cerner-action.service';\n\n@Component({\n  selector: 'app-patient-selection',\n  templateUrl: './patient-selection.component.html',\n  styleUrls: ['./patient-selection.component.scss']\n})\nexport class PatientSelectionComponent implements OnInit {\n  @Input() configLoaded = false;\n  @Output() patientSelected = new EventEmitter<PatientInfo>();\n  \n  patientForm: FormGroup;\n  loading = false;\n  patientInfo: PatientInfo | null = null;\n  patientSearchResults: PatientSearchResult[] = [];\n  showPatientSelection = false;\n  errorMessage = '';\n\n  constructor(\n    private fb: FormBuilder,\n    private documentService: DocumentExtractService,\n    private cernerActionService: CernerActionService\n  ) {\n    this.patientForm = this.fb.group({\n      fin: ['', [Validators.required, Validators.minLength(1)]]\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Handles form submission to search for patients\n   */\n  onSubmit(): void {\n    if (this.patientForm.valid) {\n      this.loading = true;\n      this.errorMessage = '';\n      this.patientInfo = null;\n      this.showPatientSelection = false;\n\n      const fin = this.patientForm.get('fin')?.value;\n\n      this.documentService.searchPatients(fin).subscribe({\n        next: (patients: PatientSearchResult[]) => {\n          this.patientSearchResults = patients;\n          this.showPatientSelection = patients.length > 0;\n          this.loading = false;\n          \n          if (patients.length === 0) {\n            this.errorMessage = 'No patients found with the provided FIN.';\n          }\n        },\n        error: (error) => {\n          this.errorMessage = 'Error searching for patients. Please try again.';\n          this.loading = false;\n          console.error('Error searching for patients:', error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Selects a patient and loads their documents\n   * @param patient The selected patient\n   */\n  selectPatient(patient: PatientSearchResult): void {\n    this.loading = true;\n    this.errorMessage = '';\n    this.showPatientSelection = false;\n\n    this.documentService.getPatientDocuments(patient.encntrId).subscribe({\n      next: (patientInfo: PatientInfo) => {\n        this.patientInfo = patientInfo;\n        this.loading = false;\n        // Emit the patient information to parent component\n        this.patientSelected.emit(patientInfo);\n      },\n      error: (error) => {\n        this.errorMessage = 'Error retrieving patient documents. Please try again.';\n        this.loading = false;\n        console.error('Error fetching patient documents:', error);\n      }\n    });\n  }\n\n  /**\n   * Resets the form and clears patient data\n   */\n  resetForm(): void {\n    this.patientForm.reset();\n    this.patientInfo = null;\n    this.patientSearchResults = [];\n    this.showPatientSelection = false;\n    this.errorMessage = '';\n  }\n\n  /**\n   * Opens the patient chart using Cerner actions\n   */\n  openChart(): void {\n    if (this.patientInfo) {\n      this.cernerActionService.openChart(this.patientInfo.personId, this.patientInfo.encntrId);\n    }\n  }\n\n  /**\n   * Opens the MMF Multimedia Manager for the patient using Cerner actions\n   */\n  openMultimediaManager(): void {\n    if (this.patientInfo) {\n      this.cernerActionService.openMultimediaManager(this.patientInfo.personId, this.patientInfo.encntrId);\n    }\n  }\n} ","<div class=\"patient-selection-container\">\n  <div class=\"form-section\">\n    <h2>Patient Document Lookup</h2>\n    \n    <div class=\"config-status\" *ngIf=\"!configLoaded\">\n      <p>Loading configuration...</p>\n    </div>\n    \n    <form [formGroup]=\"patientForm\" (ngSubmit)=\"onSubmit()\" class=\"patient-form\" [class.disabled]=\"!configLoaded\">\n      <div class=\"form-field\">\n        <label for=\"fin\">Patient FIN (Financial Identification Number)</label>\n        <input \n          id=\"fin\"\n          type=\"text\" \n          formControlName=\"fin\"\n          placeholder=\"Enter patient FIN\"\n          class=\"form-input\"\n          [class.error]=\"patientForm.get('fin')?.invalid && patientForm.get('fin')?.touched\"\n          [disabled]=\"!configLoaded\"\n        />\n        <div class=\"error-message\" *ngIf=\"patientForm.get('fin')?.invalid && patientForm.get('fin')?.touched\">\n          <span *ngIf=\"patientForm.get('fin')?.errors?.['required']\">FIN is required</span>\n          <span *ngIf=\"patientForm.get('fin')?.errors?.['minlength']\">FIN must be at least 1 character</span>\n        </div>\n      </div>\n\n      <div class=\"form-actions\">\n        <button \n          type=\"submit\" \n          class=\"btn btn-primary\"\n          [disabled]=\"patientForm.invalid || loading || !configLoaded\"\n        >\n          <span *ngIf=\"loading\">Searching...</span>\n          <span *ngIf=\"!loading\">Search Patients</span>\n        </button>\n        \n        <button \n          type=\"button\" \n          class=\"btn btn-secondary\"\n          (click)=\"resetForm()\"\n          [disabled]=\"loading\"\n        >\n          Reset\n        </button>\n      </div>\n    </form>\n\n    <div class=\"error-message\" *ngIf=\"errorMessage\">\n      {{ errorMessage }}\n    </div>\n  </div>\n\n  <!-- Patient Search Results -->\n  <div class=\"patient-search-results\" *ngIf=\"showPatientSelection && patientSearchResults.length > 0\">\n    <h3>Select a Patient</h3>\n    <div class=\"patient-list\">\n      <div \n        *ngFor=\"let patient of patientSearchResults\" \n        class=\"patient-item\"\n        (click)=\"selectPatient(patient)\"\n      >\n        <div class=\"patient-info\">\n          <div class=\"patient-name\">{{ patient.name }}</div>\n          <div class=\"patient-details\">\n            <span class=\"fin\">FIN: {{ patient.fin }}</span>\n            <span class=\"mrn\">MRN: {{ patient.mrn }}</span>\n            <span class=\"dob\">DOB: {{ patient.dateOfBirth | date:'MM/dd/yyyy' }}</span>\n            <span class=\"sex\">Sex: {{ patient.sex }}</span>\n          </div>\n          <div class=\"encounter-details\">\n            <span class=\"facility\">Facility: {{ patient.facility }}</span>\n            <span class=\"unit\">Unit: {{ patient.unit }}</span>\n            <span class=\"encntr-type\">Type: {{ patient.encntrType }}</span>\n            <span class=\"med-service\">Service: {{ patient.medService }}</span>\n          </div>\n          <div class=\"date-details\">\n            <span class=\"reg-date\">Registration: {{ patient.regDtTm | date:'MM/dd/yyyy' }}</span>\n            <span class=\"arrival-date\">Arrival: {{ patient.arrivalDtTm | date:'MM/dd/yyyy' }}</span>\n            <span class=\"discharge-date\" *ngIf=\"patient.dischDtTm.getTime() > 0\">Discharge: {{ patient.dischDtTm | date:'MM/dd/yyyy' }}</span>\n          </div>\n        </div>\n        <div class=\"select-indicator\">→</div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"patient-info\" *ngIf=\"patientInfo\">\n    <div class=\"patient-info-header\">\n      <h3>Patient Information</h3>\n      <div class=\"action-buttons\">\n        <button \n          type=\"button\" \n          class=\"btn btn-primary open-chart-btn\"\n          (click)=\"openChart()\"\n          title=\"Open patient chart in PowerChart\"\n        >\n          <span>📋</span> Open Chart\n        </button>\n        <button \n          type=\"button\" \n          class=\"btn btn-secondary multimedia-btn\"\n          (click)=\"openMultimediaManager()\"\n          title=\"Open MMF Multimedia Manager for this patient\"\n        >\n          <span>📷</span> Multimedia\n        </button>\n      </div>\n    </div>\n    <div class=\"info-grid\">\n      <div class=\"info-item\">\n        <label>FIN:</label>\n        <span>{{ patientInfo.fin }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>Name:</label>\n        <span>{{ patientInfo.name }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>MRN:</label>\n        <span>{{ patientInfo.mrn }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>Date of Birth:</label>\n        <span>{{ patientInfo.dateOfBirth | date:'MM/dd/yyyy' }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>Sex:</label>\n        <span>{{ patientInfo.sex }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>Facility:</label>\n        <span>{{ patientInfo.facility }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>Unit:</label>\n        <span>{{ patientInfo.unit }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>Encounter Type:</label>\n        <span>{{ patientInfo.encntrType }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>Medical Service:</label>\n        <span>{{ patientInfo.medService }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>Registration Date:</label>\n        <span>{{ patientInfo.regDtTm | date:'MM/dd/yyyy' }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>Arrival Date:</label>\n        <span>{{ patientInfo.arrivalDtTm | date:'MM/dd/yyyy' }}</span>\n      </div>\n      <div class=\"info-item\" *ngIf=\"patientInfo.dischDtTm.getTime() > 0\">\n        <label>Discharge Date:</label>\n        <span>{{ patientInfo.dischDtTm | date:'MM/dd/yyyy' }}</span>\n      </div>\n      <div class=\"info-item\">\n        <label>Documents Found:</label>\n        <span>{{ patientInfo.documents.length }} {{ patientInfo.documents.length === 1 ? 'document' : 'documents' }}</span>\n      </div>\n      <div class=\"info-item\" *ngIf=\"patientInfo.documents.length === 0\">\n        <label>Status:</label>\n        <span class=\"no-documents\">No documents found for this patient</span>\n      </div>\n    </div>\n  </div>\n</div> ","import { Injectable } from '@angular/core';\nimport { mPageService } from '@clinicaloffice/clinical-office-mpage-core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CernerActionService {\n\n  constructor(private mPage: mPageService) { }\n\n  /**\n   * Opens a patient chart using the APPLINK command\n   * @param personId The person ID of the patient\n   * @param encntrId The encounter ID (optional)\n   */\n  openChart(personId: number, encntrId?: number): void {\n    const el = document.getElementById('applink');\n    \n    if (!el) {\n      console.warn('Element with id \"applink\" not found');\n      return;\n    }\n\n    if (personId !== undefined && encntrId !== undefined) {\n      // @ts-ignore\n      el.href = 'javascript:APPLINK(0,\"Powerchart.exe\",\"/PERSONID=' + personId + ' /ENCNTRID=' + encntrId + '\")';\n    } else if (personId !== undefined) {\n      // @ts-ignore\n      el.href = 'javascript:APPLINK(0,\"Powerchart.exe\",\"/PERSONID=' + personId + '\")';\n    } else {\n      console.warn('personId is required for OPENCHART action');\n      return;\n    }\n\n    // Execute chart opening action via APPLINK\n    el.click();\n  }\n\n  /**\n   * Launches the MMF Multimedia Manager for a patient using the APPLINK command\n   * @param personId The person ID of the patient\n   * @param encntrId The encounter ID (optional)\n   */\n  openMultimediaManager(personId: number, encntrId?: number): void {\n    const el = document.getElementById('applink');\n    \n    if (!el) {\n      console.warn('Element with id \"applink\" not found');\n      return;\n    }\n\n    if (personId !== undefined && encntrId !== undefined) {\n      // @ts-ignore\n      el.href = 'javascript:APPLINK(0,\"mmfmultimediamanager.exe\",\"/PERSONID=' + personId + ' /ENCNTRID=' + encntrId + '\")';\n    } else if (personId !== undefined) {\n      // @ts-ignore\n      el.href = 'javascript:APPLINK(0,\"mmfmultimediamanager.exe\",\"/PERSONID=' + personId + '\")';\n    } else {\n      console.warn('personId is required for OPEN_MULTIMEDIA_MANAGER action');\n      return;\n    }\n\n    // Execute multimedia manager opening action via APPLINK\n    el.click();\n  }\n\n  /**\n   * Handles Cerner actions such as OPENCHART, VIEWORDER, APPT_VIEW, and APPT_HX_VIEW.\n   * @param action The Cerner action to perform\n   * @param data The data required for the action\n   */\n  async CernerAction(action: string, data: any): Promise<void> {\n    // Process Cerner action with provided data\n    const el = document.getElementById('applink');\n    if (data.encntrId || data.personId || data.orderId) {\n      switch (action) {\n        case 'OPENCHART':\n          this.openChart(data.personId, data.encntrId);\n          break;\n        case 'VIEWORDER':\n          try {\n            await this.viewOrderAsync(data);\n          } catch (error) {\n            this.mPage.putLog('VIEWORDER error: ' + error);\n          }\n          break;\n        case 'APPT_VIEW':\n          try {\n            await this.viewAppointmentAsync(data, 'APPT_VIEW');\n          } catch (error) {\n            this.mPage.putLog('APPT_VIEW error: ' + error);\n          }\n          break;\n        case 'APPT_HX_VIEW':\n          try {\n            await this.viewAppointmentAsync(data, 'APPT_HX_VIEW');\n          } catch (error) {\n            this.mPage.putLog('APPT_HX_VIEW error: ' + error);\n          }\n          break;\n        case 'MODIFY_ORDER':\n          try {\n            await this.modifyOrderAsync(data);\n          } catch (error) {\n            this.mPage.putLog('MODIFY_ORDER error: ' + error);\n          }\n          break;\n        default:\n          alert('The action ' + action + ' has not been defined.');\n          break;\n      }\n    } else {\n      // Handle actions that don't require patient context (encntrId or personId)\n      switch (action) {\n        case 'URL':\n          // @ts-ignore\n          el.href = 'javascript:APPLINK(100,\"' + data + '\", \"\");';\n          // @ts-ignore\n          el.click();\n          break;\n        default:\n          alert('The action ' + action + ' has not been defined.');\n          break;\n      }\n    }\n  }\n\n  /**\n   * Opens the Order Info Viewer for a specific order using DiscernObjectFactory\n   * @param data Object containing orderId, personId, and encntrId\n   */\n  private async viewOrderAsync(data: any): Promise<void> {\n    try {\n      if (!data.orderId) {\n        throw new Error('orderId is required for VIEWORDER action');\n      }\n\n      const orderInfoViewer = await (window as any).external.DiscernObjectFactory(\"PVVIEWERMPAGE\");\n      await orderInfoViewer.LaunchOrderInfoViewer(data.orderId, 1);\n      \n    } catch (error) {\n      this.mPage.putLog('VIEWORDER failed: ' + error);\n      throw error;\n    }\n  }\n\n  /**\n   * Opens the Appointment Viewer or Appointment History Viewer using DiscernObjectFactory\n   * @param data Object containing schEventId and scheduleId\n   * @param actionType 'APPT_VIEW' or 'APPT_HX_VIEW'\n   */\n  private async viewAppointmentAsync(data: any, actionType: 'APPT_VIEW' | 'APPT_HX_VIEW'): Promise<void> {\n    try {\n      const eventId = parseFloat(data.schEventId);\n      const scheduleId = parseFloat(data.scheduleId);\n      \n      if (!(eventId > 0)) {\n        throw new Error('schEventId is required and must be > 0 for ' + actionType);\n      }\n      \n      const schedulingActions = await (window as any).external.DiscernObjectFactory('PEXSCHEDULINGACTIONS');\n      if (actionType === 'APPT_VIEW') {\n        schedulingActions.ShowView(eventId, scheduleId);\n        this.mPage.putLog('APPT_VIEW: ShowView called for eventId=' + eventId + ', scheduleId=' + scheduleId);\n      } else if (actionType === 'APPT_HX_VIEW') {\n        schedulingActions.ShowHistoryView(eventId, scheduleId);\n        this.mPage.putLog('APPT_HX_VIEW: ShowHistoryView called for eventId=' + eventId + ', scheduleId=' + scheduleId);\n      }\n    } catch (error) {\n      this.mPage.putLog(actionType + ' failed: ' + error);\n      throw error;\n    }\n  }\n\n  /**\n   * Opens the Modal Order Entry Window to modify an existing order using MPAGES_EVENT\n   * @param data Object containing orderId, personId, and encntrId\n   */\n  private async modifyOrderAsync(data: any): Promise<void> {\n    try {\n      if (!data.orderId) {\n        throw new Error('orderId is required for MODIFY_ORDER action');\n      }\n      if (!data.personId) {\n        throw new Error('personId is required for MODIFY_ORDER action');\n      }\n\n      const personId = data.personId;\n      const encntrId = data.encntrId;\n      const orderId = data.orderId;\n      \n      const orderLst = `{MODIFY|${orderId}}`;\n      const customizeFlags = data.enablePowerPlans ? 24 : 0;\n      const tabLst = '{2|127}{3|127}';\n      const defaultDisplay = data.defaultDisplay || 32;\n      const silentSignFlag = data.silentSign ? 1 : 0;\n      \n      const parameters = `${personId}|${encntrId}|${orderLst}|${customizeFlags}|${tabLst}|${defaultDisplay}|${silentSignFlag}`;\n      const mpagesEventCall = `MPAGES_EVENT(\"ORDERS\",\"${parameters}\")`;\n      \n      this.mPage.putLog('MODIFY_ORDER: Executing MPAGES_EVENT with parameters: ' + parameters);\n      \n      const el = document.getElementById('applink');\n      if (el) {\n        // @ts-ignore\n        el.href = 'javascript:' + mpagesEventCall;\n        // @ts-ignore\n        el.click();\n      } else {\n        throw new Error('Element with id \"applink\" not found');\n      }\n      \n      this.mPage.putLog('MODIFY_ORDER: MPAGES_EVENT executed successfully');\n      \n    } catch (error) {\n      this.mPage.putLog('MODIFY_ORDER failed: ' + error);\n      throw error;\n    }\n  }\n} ","import { Injectable } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\nimport { CustomService } from '@clinicaloffice/clinical-office-mpage-core';\n\nexport interface PatientDocument {\n  id: string;\n  documentName: string;\n  documentType: string;\n  documentDate: Date;\n  documentSize: string;\n  selected: boolean;\n  contentTypeKey: string;\n  contentTypeDisplay: string;\n  contentTypeDescription: string;\n  identifier: string;\n  contentUid: string;\n  mediaType: string;\n  appCtx: string;\n  mediaObjectIdentifier: string;\n  parentEntityName: string;\n  parentEntityId: number;\n  sourceType: 'dms' | 'cpdi';\n}\n\nexport interface PatientInfo {\n  fin: string;\n  name: string;\n  dateOfBirth: Date;\n  documents: PatientDocument[];\n  personId: number;\n  encntrId: number;\n  facility: string;\n  unit: string;\n  encntrType: string;\n  medService: string;\n  regDtTm: Date;\n  arrivalDtTm: Date;\n  dischDtTm: Date;\n  sex: string;\n  mrn: string;\n}\n\nexport interface PatientSearchResult {\n  fin: string;\n  name: string;\n  dateOfBirth: Date;\n  encntrId: number;\n  personId: number;\n  mrn: string;\n  facility: string;\n  unit: string;\n  encntrType: string;\n  medService: string;\n  regDtTm: Date;\n  arrivalDtTm: Date;\n  dischDtTm: Date;\n  sex: string;\n  selected?: boolean;\n}\n\nexport interface ConfigData {\n  // Configuration object structure will be defined based on actual response\n  [key: string]: any;\n}\n\nexport interface DmsMediaInstanceRequest {\n  mediaInstanceId: number;\n}\n\nexport interface CpdiDocumentRequest {\n  eventId: number;\n  blobHandle: string;\n}\n\nexport interface DownloadResult {\n  mediaInstanceId: number;\n  documentType: string;\n  filename: string;\n  status: number;\n  fullpath: string;\n  message: string;\n  documentName: string;\n  contentType: string;\n}\n\nexport interface DownloadDocumentsResponse {\n  downloadResults: DownloadResult[];\n}\n\nexport interface DownloadProgress {\n  total: number;\n  completed: number;\n  failed: number;\n  current: DmsMediaInstanceRequest | null;\n  results: DownloadResult[];\n}\n\nexport interface SequentialDownloadResponse {\n  progress: DownloadProgress;\n  isComplete: boolean;\n  allResults: DownloadResult[];\n}\n\nexport interface ExtractRequest {\n  personId: number;\n  encntrId: number;\n  downloadedFiles: DownloadedFile[];\n}\n\nexport interface DownloadedFile {\n  filename: string;\n  fullpath: string;\n  documentName: string;\n  documentType: string;\n  mediaInstanceId: number;\n}\n\nexport interface ExtractResponse {\n  success: boolean;\n  zipFileUrl?: string;\n  zipFileName?: string;\n  message: string;\n  metadataFile?: string;\n  zipCammIdentifier?: string;\n  downloadUrl?: string;\n  fileName?: string;  // For fileTransfer endpoint\n  nodeName?: string;  // For fileTransfer endpoint\n  extractInfo?: {\n    zipFilename?: string;\n    metadataFilename?: string;\n    fileCount?: number;\n    zipCammIdentifier?: string;\n    downloadUrl?: string;\n    fileName?: string;  // For fileTransfer endpoint\n    nodeName?: string;  // For fileTransfer endpoint\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentExtractService {\n\n  private configData: ConfigData | null = null;\n\n  constructor(private customService: CustomService) { }\n\n  /**\n   * Loads configuration data from the service\n   * @returns Observable of ConfigData\n   */\n  getConfigData(): Observable<ConfigData> {\n    console.log('[DocumentExtractService] getConfigData() - Starting configuration data load');\n    return new Observable<ConfigData>(observer => {\n      this.customService.load(\n        {\n          customScript: {\n            script: [\n              {\n                name: 'chs_document_extract_svc',\n                run: 'pre',\n                id: 'configData',\n                parameters: { \n                  requestType: 'getConfigData', \n                  requestData: {}\n                }\n              }\n            ],\n            clearPatientSource: true\n          }\n        },\n        [{ personId: 0, encntrId: 0 }],\n        () => {\n          try {\n            console.log('[DocumentExtractService] getConfigData() - Service call completed, retrieving data');\n            const raw = this.customService.get('configData');\n            \n            if (!raw) {\n              console.error('[DocumentExtractService] getConfigData() - No configuration data received');\n              observer.error('No configuration data received');\n              return;\n            }\n\n            console.log('[DocumentExtractService] getConfigData() - Configuration data received:', raw);\n            this.configData = raw;\n            observer.next(raw);\n            observer.complete();\n          } catch (error) {\n            console.error('[DocumentExtractService] getConfigData() - Error:', error);\n            observer.error(error);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Searches for patients by FIN\n   * @param fin The patient's FIN (Financial Identification Number)\n   * @returns Observable of PatientSearchResult array\n   */\n  searchPatients(fin: string): Observable<PatientSearchResult[]> {\n    console.log('[DocumentExtractService] searchPatients() - Starting patient search for FIN:', fin);\n    return new Observable<PatientSearchResult[]>(observer => {\n      this.customService.load(\n        {\n          customScript: {\n            script: [\n              {\n                name: 'chs_document_extract_svc',\n                run: 'pre',\n                id: 'patientSearch',\n                parameters: { \n                  requestType: 'searchPatients', \n                  requestData: JSON.stringify({chs_document_extract_svc_request: { fin: fin }})\n                }\n              }\n            ],\n            clearPatientSource: true\n          }\n        },\n        [{ personId: 0, encntrId: 0 }],\n        () => {\n          try {\n            console.log('[DocumentExtractService] searchPatients() - Service call completed, retrieving data');\n            const raw = this.customService.get('patientSearch');\n            \n            if (!raw) {\n              console.error('[DocumentExtractService] searchPatients() - No patient search results received');\n              observer.error('No patient search results received');\n              return;\n            }\n\n            console.log('[DocumentExtractService] searchPatients() - Raw response received:', raw);\n            // Map the raw response to PatientSearchResult array\n            const patients: PatientSearchResult[] = this.mapToPatientSearchResults(raw);\n            console.log('[DocumentExtractService] searchPatients() - Mapped patients:', patients);\n            observer.next(patients);\n            observer.complete();\n          } catch (error) {\n            console.error('[DocumentExtractService] searchPatients() - Error:', error);\n            observer.error(error);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Searches for patient documents by Encounter ID\n   * @param encntrId The patient's Encounter ID\n   * @returns Observable of PatientInfo with documents\n   */\n  getPatientDocuments(encntrId: number): Observable<PatientInfo> {\n    console.log('[DocumentExtractService] getPatientDocuments() - Starting document retrieval for encounter ID:', encntrId);\n    return new Observable<PatientInfo>(observer => {\n      this.customService.load(\n        {\n          customScript: {\n            script: [\n              {\n                name: 'chs_document_extract_svc',\n                run: 'pre',\n                id: 'patientDocuments',\n                parameters: { \n                  requestType: 'getPatientDocuments', \n                  requestData: JSON.stringify({chs_document_extract_svc_request: { encntrId: encntrId }})\n                }\n              }\n            ],\n            clearPatientSource: true\n          }\n        },\n        [{ personId: 0, encntrId: 0 }],\n        () => {\n          try {\n            console.log('[DocumentExtractService] getPatientDocuments() - Service call completed, retrieving data');\n            const raw = this.customService.get('patientDocuments');\n            \n            if (!raw) {\n              console.error('[DocumentExtractService] getPatientDocuments() - No response from document service');\n              observer.error('No response from document service');\n              return;\n            }\n\n            console.log('[DocumentExtractService] getPatientDocuments() - Raw response received:', raw);\n            // Map the raw response to PatientInfo structure\n            const patientInfo: PatientInfo = this.mapToPatientInfo(raw);\n            console.log('[DocumentExtractService] getPatientDocuments() - Mapped patient info:', patientInfo);\n            observer.next(patientInfo);\n            observer.complete();\n          } catch (error) {\n            console.error('[DocumentExtractService] getPatientDocuments() - Error:', error);\n            observer.error(error);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Initiates document download for selected documents\n   * @param personId The patient's person ID\n   * @param encntrId The patient's encounter ID\n   * @param dmsMediaInstanceRequests Array of document media instance requests to download\n   * @returns Observable of download status\n   */\n  downloadDocuments(personId: number, encntrId: number, dmsMediaInstanceRequests: DmsMediaInstanceRequest[]): Observable<DownloadDocumentsResponse> {\n    console.log('[DocumentExtractService] downloadDocuments() - Starting download for:', {\n      personId,\n      encntrId,\n      requestCount: dmsMediaInstanceRequests.length,\n      requests: dmsMediaInstanceRequests\n    });\n    return new Observable<DownloadDocumentsResponse>(observer => {\n      this.customService.load(\n        {\n          customScript: {\n            script: [\n              {\n                name: 'chs_document_extract_svc',\n                run: 'pre',\n                id: 'downloadDocuments',\n                parameters: { \n                  requestType: 'downloadDocuments', \n                  requestData: JSON.stringify({\n                    chs_document_extract_svc_request: {\n                      personId: personId,\n                      encntrId: encntrId,\n                      dmsMediaInstanceIds: dmsMediaInstanceRequests\n                    }\n                  })\n                }\n              }\n            ],\n            clearPatientSource: true\n          }\n        },\n        [{ personId: personId, encntrId: encntrId }],\n        () => {\n          try {\n            console.log('[DocumentExtractService] downloadDocuments() - Service call completed, retrieving data');\n            const raw = this.customService.get('downloadDocuments');\n            \n            if (!raw) {\n              console.error('[DocumentExtractService] downloadDocuments() - No response from download service');\n              observer.error('No response from download service');\n              return;\n            }\n\n            console.log('[DocumentExtractService] downloadDocuments() - Raw response received:', raw);\n            // Parse the response to get download results\n            const downloadResponse: DownloadDocumentsResponse = this.parseDownloadResponse(raw);\n            console.log('[DocumentExtractService] downloadDocuments() - Parsed download response:', downloadResponse);\n            observer.next(downloadResponse);\n            observer.complete();\n          } catch (error) {\n            console.error('[DocumentExtractService] downloadDocuments() - Error:', error);\n            observer.error(error);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Processes a single document download request sequentially.\n   * @param personId The patient's person ID.\n   * @param encntrId The patient's encounter ID.\n   * @param dmsMediaInstanceRequest The single document media instance request to download.\n   * @returns Observable of SequentialDownloadResponse.\n   */\n  downloadSingleDocument(personId: number, encntrId: number, dmsMediaInstanceRequest: DmsMediaInstanceRequest): Observable<SequentialDownloadResponse> {\n    console.log('[DocumentExtractService] downloadSingleDocument() - Starting sequential download for single document:', dmsMediaInstanceRequest);\n    return new Observable<SequentialDownloadResponse>(observer => {\n      this.customService.load(\n        {\n          customScript: {\n            script: [\n              {\n                name: 'chs_document_extract_svc',\n                run: 'pre',\n                id: `downloadSingleDocument_${dmsMediaInstanceRequest.mediaInstanceId}`,\n                parameters: { \n                  requestType: 'downloadSingleDocument', \n                  requestData: JSON.stringify({\n                    chs_document_extract_svc_request: {\n                      personId: personId,\n                      encntrId: encntrId,\n                      dmsMediaInstanceId: dmsMediaInstanceRequest.mediaInstanceId\n                    }\n                  })\n                }\n              }\n            ],\n            clearPatientSource: true\n          }\n        },\n        [{ personId: personId, encntrId: encntrId }],\n        () => {\n          try {\n            console.log('[DocumentExtractService] downloadSingleDocument() - Service call completed, retrieving data');\n            const raw = this.customService.get(`downloadSingleDocument_${dmsMediaInstanceRequest.mediaInstanceId}`);\n            \n            if (!raw) {\n              console.error('[DocumentExtractService] downloadSingleDocument() - No response from download service for single document');\n              observer.error('No response from download service for single document');\n              return;\n            }\n\n            console.log('[DocumentExtractService] downloadSingleDocument() - Raw response received:', raw);\n            const downloadResult: DownloadResult = this.parseDownloadSingleDocumentResponse(raw);\n            console.log('[DocumentExtractService] downloadSingleDocument() - Parsed single document result:', downloadResult);\n\n            const progress: DownloadProgress = {\n              total: 1,\n              completed: 1,\n              failed: 0,\n              current: dmsMediaInstanceRequest,\n              results: [downloadResult]\n            };\n            const isComplete = true;\n            const allResults = [downloadResult];\n\n            observer.next({ progress, isComplete, allResults });\n            observer.complete();\n          } catch (error) {\n            console.error('[DocumentExtractService] downloadSingleDocument() - Error:', error);\n            observer.error(error);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Downloads documents sequentially, one at a time, with progress tracking.\n   * @param personId The patient's person ID.\n   * @param encntrId The patient's encounter ID.\n   * @param dmsMediaInstanceRequests Array of document media instance requests to download.\n   * @returns Observable of SequentialDownloadResponse with progress updates.\n   */\n  downloadDocumentsSequentially(personId: number, encntrId: number, dmsMediaInstanceRequests: DmsMediaInstanceRequest[]): Observable<SequentialDownloadResponse> {\n    console.log('[DocumentExtractService] downloadDocumentsSequentially() - Starting sequential download for:', {\n      personId,\n      encntrId,\n      requestCount: dmsMediaInstanceRequests.length,\n      requests: dmsMediaInstanceRequests\n    });\n\n    return new Observable<SequentialDownloadResponse>(observer => {\n      const total = dmsMediaInstanceRequests.length;\n      let completed = 0;\n      let failed = 0;\n      const allResults: DownloadResult[] = [];\n      let currentIndex = 0;\n\n      const processNext = () => {\n        if (currentIndex >= total) {\n          console.log('[DocumentExtractService] downloadDocumentsSequentially() - All downloads completed');\n          const progress: DownloadProgress = {\n            total,\n            completed,\n            failed,\n            current: null,\n            results: allResults\n          };\n          observer.next({ progress, isComplete: true, allResults });\n          observer.complete();\n          return;\n        }\n\n        const currentRequest = dmsMediaInstanceRequests[currentIndex];\n        console.log('[DocumentExtractService] downloadDocumentsSequentially() - Processing download', currentIndex + 1, 'of', total, ':', currentRequest);\n\n        const progress: DownloadProgress = {\n          total,\n          completed,\n          failed,\n          current: currentRequest,\n          results: allResults\n        };\n        observer.next({ progress, isComplete: false, allResults });\n\n        this.downloadSingleDocument(personId, encntrId, currentRequest).subscribe({\n          next: (response) => {\n            console.log('[DocumentExtractService] downloadDocumentsSequentially() - Single document download completed:', response);\n            const result = response.allResults[0];\n            allResults.push(result);\n            \n            if (result.status === 1) {\n              completed++;\n              console.log('[DocumentExtractService] downloadDocumentsSequentially() - Download successful for mediaInstanceId:', result.mediaInstanceId);\n            } else {\n              failed++;\n              console.log('[DocumentExtractService] downloadDocumentsSequentially() - Download failed for mediaInstanceId:', result.mediaInstanceId, 'Error:', result.message);\n            }\n            \n            currentIndex++;\n            processNext();\n          },\n          error: (error) => {\n            console.error('[DocumentExtractService] downloadDocumentsSequentially() - Error downloading single document:', error);\n            failed++;\n            currentIndex++;\n            processNext();\n          }\n        });\n      };\n\n      processNext();\n    });\n  }\n\n  /**\n   * Creates an extract (metadata file and zip archive) from downloaded files\n   * @param extractRequest The extract request containing person info and downloaded files\n   * @returns Observable of ExtractResponse\n   */\n  createExtract(extractRequest: ExtractRequest): Observable<ExtractResponse> {\n    console.log('[DocumentExtractService] createExtract() - Starting extract creation:', {\n      personId: extractRequest.personId,\n      encntrId: extractRequest.encntrId,\n      fileCount: extractRequest.downloadedFiles.length\n    });\n\n    return new Observable<ExtractResponse>(observer => {\n      this.customService.load(\n        {\n          customScript: {\n            script: [\n              {\n                name: 'chs_document_extract_svc',\n                run: 'pre',\n                id: 'createExtract',\n                parameters: { \n                  requestType: 'createExtract', \n                  requestData: JSON.stringify({\n                    chs_document_extract_svc_request: {\n                      personId: extractRequest.personId,\n                      encntrId: extractRequest.encntrId,\n                      downloadedFiles: extractRequest.downloadedFiles\n                    }\n                  })\n                }\n              }\n            ],\n            clearPatientSource: true\n          }\n        },\n        [{ personId: extractRequest.personId, encntrId: extractRequest.encntrId }],\n        () => {\n          try {\n            console.log('[DocumentExtractService] createExtract() - Service call completed, retrieving data');\n            const raw = this.customService.get('createExtract');\n            \n            if (!raw) {\n              console.error('[DocumentExtractService] createExtract() - No response from extract service');\n              observer.error('No response from extract service');\n              return;\n            }\n\n            console.log('[DocumentExtractService] createExtract() - Raw response received:', raw);\n            const extractResponse: ExtractResponse = this.parseExtractResponse(raw);\n            console.log('[DocumentExtractService] createExtract() - Parsed extract response:', extractResponse);\n            observer.next(extractResponse);\n            observer.complete();\n          } catch (error) {\n            console.error('[DocumentExtractService] createExtract() - Error:', error);\n            observer.error(error);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Maps raw service response to PatientSearchResult array\n   * @param raw Raw response from the service\n   * @returns PatientSearchResult array\n   */\n  private mapToPatientSearchResults(raw: any): PatientSearchResult[] {\n    console.log('[DocumentExtractService] mapToPatientSearchResults() - Starting mapping of raw data:', raw);\n    // Map the qual array from the response to PatientSearchResult objects\n    if (raw.qual && Array.isArray(raw.qual)) {\n      const results = raw.qual.map((patient: any) => ({\n        fin: patient.fin || '',\n        name: patient.nameFullFormatted || '',\n        dateOfBirth: patient.dob ? this.parseDate(patient.dob) : new Date(),\n        encntrId: patient.encntrId || 0,\n        personId: patient.personId || 0,\n        mrn: patient.mrn || '',\n        facility: patient.facility || '',\n        unit: patient.unit || '',\n        encntrType: patient.encntrType || '',\n        medService: patient.medService || '',\n        regDtTm: patient.regDtTm ? new Date(patient.regDtTm) : new Date(),\n        arrivalDtTm: patient.arrivalDtTm ? new Date(patient.arrivalDtTm) : new Date(),\n        dischDtTm: patient.dischDtTm ? new Date(patient.dischDtTm) : new Date(),\n        sex: patient.sex || '',\n        selected: false\n      }));\n      console.log('[DocumentExtractService] mapToPatientSearchResults() - Mapped results:', results);\n      return results;\n    }\n    console.warn('[DocumentExtractService] mapToPatientSearchResults() - No qual array found in raw data');\n    return [];\n  }\n\n  /**\n   * Parses date strings in format \"DD-MMM-YYYY\" to Date object\n   * @param dateStr Date string in format \"DD-MMM-YYYY\"\n   * @returns Date object\n   */\n  private parseDate(dateStr: string): Date {\n    console.log('[DocumentExtractService] parseDate() - Parsing date string:', dateStr);\n    if (!dateStr || dateStr === '0000-00-00T00:00:00.000+00:00') {\n      console.log('[DocumentExtractService] parseDate() - Using default date for invalid date string');\n      return new Date();\n    }\n    \n    // Handle the \"DD-MMM-YYYY\" format from the sample\n    const months: { [key: string]: number } = {\n      'JAN': 0, 'FEB': 1, 'MAR': 2, 'APR': 3, 'MAY': 4, 'JUN': 5,\n      'JUL': 6, 'AUG': 7, 'SEP': 8, 'OCT': 9, 'NOV': 10, 'DEC': 11\n    };\n    \n    const parts = dateStr.split('-');\n    if (parts.length === 3) {\n      const day = parseInt(parts[0]);\n      const month = months[parts[1]];\n      const year = parseInt(parts[2]);\n      \n      if (!isNaN(day) && month !== undefined && !isNaN(year)) {\n        const result = new Date(year, month, day);\n        console.log('[DocumentExtractService] parseDate() - Successfully parsed date:', result);\n        return result;\n      }\n    }\n    \n    // Fallback to standard Date parsing\n    console.log('[DocumentExtractService] parseDate() - Using fallback date parsing');\n    return new Date(dateStr);\n  }\n\n  /**\n   * Maps raw service response to PatientInfo structure\n   * @param raw Raw response from the service\n   * @returns PatientInfo object\n   */\n  private mapToPatientInfo(raw: any): PatientInfo {\n    console.log('[DocumentExtractService] mapToPatientInfo() - Starting mapping of raw data:', raw);\n    // Extract patient information from the first qual entry\n    const patientQual = raw.qual && raw.qual.length > 0 ? raw.qual[0] : {};\n    console.log('[DocumentExtractService] mapToPatientInfo() - Patient qual data:', patientQual);\n    \n    // Map documents from dmsQual array\n    const dmsDocuments: PatientDocument[] = patientQual.dmsQual ? patientQual.dmsQual.map((doc: any) => ({\n      id: doc.dmsMediaInstanceId?.toString() || '',\n      documentName: doc.name || '',\n      documentType: doc.contentTypeDisplay || '',\n      documentDate: doc.createdDtTm ? new Date(doc.createdDtTm) : new Date(),\n      documentSize: this.formatFileSize(doc.contentSize || 0),\n      selected: false,\n      contentTypeKey: doc.contentTypeKey || '',\n      contentTypeDisplay: doc.contentTypeDisplay || '',\n      contentTypeDescription: doc.contentTypeDescription || '',\n      identifier: doc.identifier || '',\n      contentUid: doc.contentUid || '',\n      mediaType: doc.mediaType || '',\n      appCtx: doc.appCtx || '',\n      mediaObjectIdentifier: doc.mediaObjectIdentifier || '',\n      parentEntityName: doc.parentEntityName || '',\n      parentEntityId: doc.parentEntityId || 0,\n      sourceType: 'dms' as const\n    })) : [];\n\n    // Map documents from cpdiQual array\n    const cpdiDocuments: PatientDocument[] = patientQual.cpdiQual ? patientQual.cpdiQual.map((doc: any) => ({\n      id: doc.eventId?.toString() || '',\n      documentName: doc.eventTitleText || 'CPDI Document',\n      documentType: 'CPDI Document',\n      documentDate: doc.eventEndDtTm ? new Date(doc.eventEndDtTm) : new Date(),\n      documentSize: 'Unknown',\n      selected: false,\n      contentTypeKey: 'CPDI',\n      contentTypeDisplay: 'CPDI Document',\n      contentTypeDescription: 'Clinical Provider Document Image',\n      identifier: 'CPDI',\n      contentUid: doc.blobHandle || '',\n      mediaType: 'pdf',\n      appCtx: 'CPDI',\n      mediaObjectIdentifier: '',\n      parentEntityName: 'EVENT',\n      parentEntityId: doc.eventId || 0,\n      sourceType: 'cpdi' as const\n    })) : [];\n\n    // Combine both document types\n    const documents: PatientDocument[] = [...dmsDocuments, ...cpdiDocuments];\n    \n    console.log('[DocumentExtractService] mapToPatientInfo() - Mapped documents:', documents);\n\n    const result = {\n      fin: patientQual.fin || '',\n      name: patientQual.nameFullFormatted || '',\n      dateOfBirth: patientQual.dob ? this.parseDate(patientQual.dob) : new Date(),\n      documents: documents,\n      personId: patientQual.personId || 0,\n      encntrId: patientQual.encntrId || 0,\n      facility: patientQual.facility || '',\n      unit: patientQual.unit || '',\n      encntrType: patientQual.encntrType || '',\n      medService: patientQual.medService || '',\n      regDtTm: patientQual.regDtTm ? new Date(patientQual.regDtTm) : new Date(),\n      arrivalDtTm: patientQual.arrivalDtTm ? new Date(patientQual.arrivalDtTm) : new Date(),\n      dischDtTm: patientQual.dischDtTm ? new Date(patientQual.dischDtTm) : new Date(),\n      sex: patientQual.sex || '',\n      mrn: patientQual.mrn || ''\n    };\n    \n    console.log('[DocumentExtractService] mapToPatientInfo() - Final mapped result:', result);\n    return result;\n  }\n\n  /**\n   * Formats file size in bytes to human readable format\n   * @param bytes File size in bytes\n   * @returns Formatted file size string\n   */\n  private formatFileSize(bytes: number): string {\n    console.log('[DocumentExtractService] formatFileSize() - Formatting bytes:', bytes);\n    if (bytes === 0) {\n      console.log('[DocumentExtractService] formatFileSize() - Returning 0 Bytes');\n      return '0 Bytes';\n    }\n    \n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    const result = parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    \n    console.log('[DocumentExtractService] formatFileSize() - Formatted result:', result);\n    return result;\n  }\n\n  /**\n   * Parses the download response from the service\n   * @param raw Raw response from the service\n   * @returns DownloadDocumentsResponse object\n   */\n  private parseDownloadResponse(raw: any): DownloadDocumentsResponse {\n    console.log('[DocumentExtractService] parseDownloadResponse() - Starting parsing of raw response:', raw);\n    if (raw.downloadDocuments_reply && raw.downloadDocuments_reply.downloadResults) {\n      const results = {\n        downloadResults: raw.downloadDocuments_reply.downloadResults.map((result: any) => ({\n          mediaInstanceId: result.mediaInstanceId || 0,\n          documentType: result.documentType || '',\n          filename: result.filename || '',\n          status: result.status || 0,\n          fullpath: result.fullpath || '',\n          message: result.message || '',\n          documentName: result.documentName || '',\n          contentType: result.contentType || ''\n        }))\n      };\n      console.log('[DocumentExtractService] parseDownloadResponse() - Parsed results:', results);\n      return results;\n    }\n    \n    // Return empty response if structure is not as expected\n    console.warn('[DocumentExtractService] parseDownloadResponse() - No downloadDocuments_reply or downloadResults found in raw data');\n    return {\n      downloadResults: []\n    };\n  }\n\n  /**\n   * Parses the response for a single document download request.\n   * @param raw Raw response from the service.\n   * @returns A single DownloadResult.\n   */\n  private parseDownloadSingleDocumentResponse(raw: any): DownloadResult {\n    console.log('[DocumentExtractService] parseDownloadSingleDocumentResponse() - Starting parsing of raw response:', raw);\n    \n    // Check for the new response structure with qual array\n    if (raw.qual && raw.qual.length > 0 && raw.qual[0].dmsQual && raw.qual[0].dmsQual.length > 0) {\n      const dmsItem = raw.qual[0].dmsQual[0];\n      console.log('[DocumentExtractService] parseDownloadSingleDocumentResponse() - Found dmsQual item:', dmsItem);\n      \n      // Check if download was successful based on downloadedInd\n      const isSuccess = dmsItem.downloadedInd === 1;\n      console.log('[DocumentExtractService] parseDownloadSingleDocumentResponse() - Download success status:', isSuccess);\n      \n      // Parse the download response if available\n      let downloadResponse = null;\n      if (dmsItem.downloadResponse) {\n        try {\n          downloadResponse = JSON.parse(dmsItem.downloadResponse);\n          console.log('[DocumentExtractService] parseDownloadSingleDocumentResponse() - Parsed download response:', downloadResponse);\n        } catch (error) {\n          console.warn('[DocumentExtractService] parseDownloadSingleDocumentResponse() - Failed to parse download response:', error);\n        }\n      }\n      \n      const result = {\n        mediaInstanceId: dmsItem.dmsMediaInstanceId || 0,\n        documentType: dmsItem.contentTypeDisplay || '',\n        filename: dmsItem.filename || dmsItem.name || '',\n        status: isSuccess ? 1 : 0,\n        fullpath: downloadResponse?.CAMM_DOWNLOAD_RESPONSE?.FULLPATH || '',\n        message: downloadResponse?.CAMM_DOWNLOAD_RESPONSE?.MESSAGE || (isSuccess ? 'Download successful' : 'Download failed'),\n        documentName: dmsItem.name || '',\n        contentType: dmsItem.contentTypeKey || ''\n      };\n      \n      console.log('[DocumentExtractService] parseDownloadSingleDocumentResponse() - Parsed result:', result);\n      return result;\n    }\n    \n    // Fallback to old response structure\n    if (raw.downloadSingleDocument_reply && raw.downloadSingleDocument_reply.downloadResult) {\n      const result = {\n        mediaInstanceId: raw.downloadSingleDocument_reply.downloadResult.mediaInstanceId || 0,\n        documentType: raw.downloadSingleDocument_reply.downloadResult.documentType || '',\n        filename: raw.downloadSingleDocument_reply.downloadResult.filename || '',\n        status: raw.downloadSingleDocument_reply.downloadResult.status || 0,\n        fullpath: raw.downloadSingleDocument_reply.downloadResult.fullpath || '',\n        message: raw.downloadSingleDocument_reply.downloadResult.message || '',\n        documentName: raw.downloadSingleDocument_reply.downloadResult.documentName || '',\n        contentType: raw.downloadSingleDocument_reply.downloadResult.contentType || ''\n      };\n      console.log('[DocumentExtractService] parseDownloadSingleDocumentResponse() - Parsed fallback result:', result);\n      return result;\n    }\n    \n    console.warn('[DocumentExtractService] parseDownloadSingleDocumentResponse() - No valid response structure found in raw data');\n    return {\n      mediaInstanceId: 0,\n      documentType: '',\n      filename: '',\n      status: 0,\n      fullpath: '',\n      message: 'No response data found',\n      documentName: '',\n      contentType: ''\n    };\n  }\n\n  /**\n   * Parses the extract response from the service\n   * @param raw Raw response from the service\n   * @returns ExtractResponse object\n   */\n  private parseExtractResponse(raw: any): ExtractResponse {\n    console.log('[DocumentExtractService] parseExtractResponse() - Starting parsing of raw response:', raw);\n    \n    // Check for the new response structure with extractInfo and qual\n    if (raw.extractInfo && raw.qual && raw.qual.length > 0) {\n      const extractInfo = raw.extractInfo;\n      const qual = raw.qual[0];\n      const isSuccess = raw.reply && raw.reply.statusData && raw.reply.statusData.status === 'S';\n      \n      const result = {\n        success: isSuccess,\n        zipFileUrl: extractInfo.downloadUrl || '',\n        zipFileName: extractInfo.zipFilename || 'extracted_documents.zip',\n        message: raw.reply?.text || (isSuccess ? 'Extract completed successfully' : 'Extract failed'),\n        metadataFile: extractInfo.metadataFilename || '',\n        zipCammIdentifier: extractInfo.zipCammIdentifier || qual.zipCammIdentifier || '',\n        downloadUrl: extractInfo.downloadUrl || '',\n        fileName: extractInfo.fileName || '', // Added for fileTransfer endpoint\n        nodeName: extractInfo.nodeName || '', // Added for fileTransfer endpoint\n        extractInfo: {\n          zipFilename: extractInfo.zipFilename || 'extracted_documents.zip',\n          metadataFilename: extractInfo.metadataFilename || '',\n          fileCount: extractInfo.fileCount || 0,\n          zipCammIdentifier: extractInfo.zipCammIdentifier || qual.zipCammIdentifier || '',\n          downloadUrl: extractInfo.downloadUrl || '',\n          fileName: extractInfo.fileName || '', // Added for fileTransfer endpoint\n          nodeName: extractInfo.nodeName || '' // Added for fileTransfer endpoint\n        }\n      };\n      console.log('[DocumentExtractService] parseExtractResponse() - Parsed extract result:', result);\n      return result;\n    }\n    \n    // Check for the new response structure with extract information\n    if (raw.createExtract_reply) {\n      const reply = raw.createExtract_reply;\n      const result = {\n        success: reply.success === true || reply.success === 1,\n        zipFileUrl: reply.zipFileUrl || '',\n        zipFileName: reply.zipFileName || 'extracted_documents.zip',\n        message: reply.message || 'Extract completed',\n        metadataFile: reply.metadataFile || '',\n        zipCammIdentifier: reply.zipCammIdentifier || '',\n        downloadUrl: reply.downloadUrl || '',\n        fileName: reply.fileName || '', // Added for fileTransfer endpoint\n        nodeName: reply.nodeName || '', // Added for fileTransfer endpoint\n        extractInfo: {\n          zipFilename: reply.zipFileName || 'extracted_documents.zip',\n          metadataFilename: reply.metadataFile || '',\n          fileCount: reply.fileCount || 0,\n          zipCammIdentifier: reply.zipCammIdentifier || '',\n          downloadUrl: reply.downloadUrl || '',\n          fileName: reply.fileName || '', // Added for fileTransfer endpoint\n          nodeName: reply.nodeName || '' // Added for fileTransfer endpoint\n        }\n      };\n      console.log('[DocumentExtractService] parseExtractResponse() - Parsed extract result:', result);\n      return result;\n    }\n    \n    // Fallback to status-based response\n    if (raw.reply && raw.reply.statusData) {\n      const isSuccess = raw.reply.statusData.status === 'S';\n      const result = {\n        success: isSuccess,\n        zipFileUrl: raw.zipFileUrl || '',\n        zipFileName: raw.zipFileName || 'extracted_documents.zip',\n        message: raw.reply.text || (isSuccess ? 'Extract completed successfully' : 'Extract failed'),\n        metadataFile: raw.metadataFile || '',\n        zipCammIdentifier: raw.zipCammIdentifier || '',\n        downloadUrl: raw.downloadUrl || '',\n        fileName: raw.fileName || '', // Added for fileTransfer endpoint\n        nodeName: raw.nodeName || '', // Added for fileTransfer endpoint\n        extractInfo: {\n          zipFilename: raw.zipFileName || 'extracted_documents.zip',\n          metadataFilename: raw.metadataFile || '',\n          fileCount: raw.fileCount || 0,\n          zipCammIdentifier: raw.zipCammIdentifier || '',\n          downloadUrl: raw.downloadUrl || '',\n          fileName: raw.fileName || '', // Added for fileTransfer endpoint\n          nodeName: raw.nodeName || '' // Added for fileTransfer endpoint\n        }\n      };\n      console.log('[DocumentExtractService] parseExtractResponse() - Parsed fallback result:', result);\n      return result;\n    }\n    \n    console.warn('[DocumentExtractService] parseExtractResponse() - No valid response structure found in raw data');\n    return {\n      success: false,\n      message: 'No response data found',\n      zipFileName: 'extracted_documents.zip'\n    };\n  }\n\n  /**\n   * Gets the loaded configuration data\n   * @returns ConfigData or null if not loaded\n   */\n  getLoadedConfigData(): ConfigData | null {\n    return this.configData;\n  }\n\n  /**\n   * Gets system credentials for basic authorization\n   * @returns Observable of credentials object\n   */\n  getSystemCredentials(): Observable<{username: string, password: string}> {\n    console.log('[DocumentExtractService] getSystemCredentials() - Getting system credentials');\n    \n    return new Observable<{username: string, password: string}>(observer => {\n      this.customService.load(\n        {\n          customScript: {\n            script: [\n              {\n                name: 'chs_document_extract_svc',\n                run: 'pre',\n                id: 'systemCredentials',\n                parameters: { \n                  requestType: 'getSystemCredentials', \n                  requestData: {}\n                }\n              }\n            ],\n            clearPatientSource: true\n          }\n        },\n        [{ personId: 0, encntrId: 0 }],\n        () => {\n          try {\n            console.log('[DocumentExtractService] getSystemCredentials() - Service call completed');\n            const raw = this.customService.get('systemCredentials');\n            \n            if (!raw) {\n              console.error('[DocumentExtractService] getSystemCredentials() - No credentials data received');\n              observer.error('No credentials data received');\n              return;\n            }\n\n            // Parse the credentials from the response\n            let credentials = {\n              username: '',\n              password: ''\n            };\n            \n            // Check for the systemCredentials_reply structure\n            if (raw.systemCredentials_reply) {\n              credentials = {\n                username: raw.systemCredentials_reply.username || '',\n                password: raw.systemCredentials_reply.password || ''\n              };\n            } else if (raw.username && raw.password) {\n              // Direct response structure\n              credentials = {\n                username: raw.username,\n                password: raw.password\n              };\n            } else {\n              console.error('[DocumentExtractService] getSystemCredentials() - No valid credentials structure found in response:', raw);\n              observer.error('No valid credentials structure found in response');\n              return;\n            }\n            \n            console.log('[DocumentExtractService] getSystemCredentials() - Credentials received:', credentials);\n            observer.next(credentials);\n            observer.complete();\n          } catch (error) {\n            console.error('[DocumentExtractService] getSystemCredentials() - Error:', error);\n            observer.error(error);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Downloads the extract file using the fileTransfer/retrieveFile endpoint\n   * Now uses MPAGES_SVC_AUTH instead of basic credentials and dynamic URL construction\n   * @param fileName The name of the file to retrieve\n   * @param nodeName The node name where the file is stored\n   * @returns Observable of the file blob\n   */\n  downloadExtractFile(fileName: string, nodeName: string): Observable<Blob> {\n    console.log('[DocumentExtractService] downloadExtractFile() - Starting file download with MPAGES_SVC_AUTH:', { fileName, nodeName });\n    \n    return new Observable<Blob>(observer => {\n      // Construct URL dynamically based on current host instead of hardcoded URL\n      const currentHost = window.location.host;\n      const url = `${window.location.protocol}//${currentHost}/mpages/fileTransfer/retrieveFile`;\n      \n      console.log('[DocumentExtractService] downloadExtractFile() - Using URL:', url);\n      \n      // Create FormData with the required parts\n      const formData = new FormData();\n      formData.append('fileName', fileName);\n      formData.append('nodeName', nodeName);\n      \n      // Create XMLHttpRequest for the POST request\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', url);\n      \n      // Set response type to blob for file download\n      xhr.responseType = 'blob';\n      \n      // Apply MPAGES_SVC_AUTH if available and in Edge context\n      const setupAuth = async () => {\n        try {\n          if ((window as any).MPAGES_SVC_AUTH) {\n            console.log('[DocumentExtractService] downloadExtractFile() - Applying MPAGES_SVC_AUTH');\n            await (window as any).MPAGES_SVC_AUTH(xhr);\n          } else {\n            console.log('[DocumentExtractService] downloadExtractFile() - MPAGES_SVC_AUTH not available, using fallback');\n            // Fallback to basic credentials if MPAGES_SVC_AUTH is not available\n            try {\n              const credentials = await this.getSystemCredentials().toPromise();\n              if (credentials) {\n                const authString = `${credentials.username}:${credentials.password}`;\n                const credentials_b64 = btoa(authString);\n                xhr.setRequestHeader('Authorization', `Basic ${credentials_b64}`);\n              } else {\n                console.warn('[DocumentExtractService] downloadExtractFile() - No credentials received');\n              }\n            } catch (credError) {\n              console.warn('[DocumentExtractService] downloadExtractFile() - Could not get basic credentials:', credError);\n            }\n          }\n        } catch (authError) {\n          console.warn('[DocumentExtractService] downloadExtractFile() - Authentication setup failed:', authError);\n        }\n        \n        // Set up response handlers\n        xhr.onload = () => {\n          if (xhr.status === 200) {\n            console.log('[DocumentExtractService] downloadExtractFile() - Download successful');\n            observer.next(xhr.response);\n            observer.complete();\n          } else {\n            console.error('[DocumentExtractService] downloadExtractFile() - Download failed with status:', xhr.status);\n            observer.error(new Error(`Download failed with status: ${xhr.status}`));\n          }\n        };\n        \n        xhr.onerror = () => {\n          console.error('[DocumentExtractService] downloadExtractFile() - Network error during download');\n          observer.error(new Error('Network error during download'));\n        };\n        \n        // Send the FormData\n        xhr.send(formData);\n      };\n      \n      setupAuth().catch(error => {\n        console.error('[DocumentExtractService] downloadExtractFile() - Setup error:', error);\n        observer.error(error);\n      });\n    });\n  }\n} ","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface ProcessStep {\n  id: string;\n  title: string;\n  description: string;\n  status: 'pending' | 'active' | 'completed' | 'error';\n  progress?: number;\n  metadata?: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProgressStepperService {\n  private stepsSubject = new BehaviorSubject<ProcessStep[]>([\n    {\n      id: 'patient',\n      title: 'Patient Selection',\n      description: 'Choose patient context',\n      status: 'pending'\n    },\n    {\n      id: 'discovery',\n      title: 'Document Discovery',\n      description: 'Find available documents',\n      status: 'pending'\n    },\n    {\n      id: 'download',\n      title: 'Document Download',\n      description: 'Download individual files',\n      status: 'pending'\n    },\n    {\n      id: 'extract',\n      title: 'Extract Creation',\n      description: 'Create ZIP archive',\n      status: 'pending'\n    },\n    {\n      id: 'complete',\n      title: 'Final Download',\n      description: 'Save ZIP to device',\n      status: 'pending'\n    }\n  ]);\n\n  steps$ = this.stepsSubject.asObservable();\n\n  constructor() { }\n\n  /**\n   * Updates a specific step's status and metadata\n   * @param stepId The step identifier\n   * @param status The new status\n   * @param progress Optional progress percentage\n   * @param metadata Optional additional data\n   */\n  updateStep(stepId: string, status: ProcessStep['status'], progress?: number, metadata?: any): void {\n    const currentSteps = this.stepsSubject.value;\n    const stepIndex = currentSteps.findIndex(step => step.id === stepId);\n    \n    if (stepIndex !== -1) {\n      const updatedSteps = [...currentSteps];\n      updatedSteps[stepIndex] = {\n        ...updatedSteps[stepIndex],\n        status,\n        progress,\n        metadata: { ...updatedSteps[stepIndex].metadata, ...metadata }\n      };\n      \n      this.stepsSubject.next(updatedSteps);\n    }\n  }\n\n  /**\n   * Updates step description dynamically\n   * @param stepId The step identifier\n   * @param description New description text\n   */\n  updateStepDescription(stepId: string, description: string): void {\n    const currentSteps = this.stepsSubject.value;\n    const stepIndex = currentSteps.findIndex(step => step.id === stepId);\n    \n    if (stepIndex !== -1) {\n      const updatedSteps = [...currentSteps];\n      updatedSteps[stepIndex] = {\n        ...updatedSteps[stepIndex],\n        description\n      };\n      \n      this.stepsSubject.next(updatedSteps);\n    }\n  }\n\n  /**\n   * Gets the current state of all steps\n   * @returns Array of current step states\n   */\n  getCurrentSteps(): ProcessStep[] {\n    return this.stepsSubject.value;\n  }\n\n  /**\n   * Gets a specific step by ID\n   * @param stepId The step identifier\n   * @returns The step or undefined if not found\n   */\n  getStep(stepId: string): ProcessStep | undefined {\n    return this.stepsSubject.value.find(step => step.id === stepId);\n  }\n\n  /**\n   * Resets all steps to pending state\n   */\n  resetAllSteps(): void {\n    const resetSteps = this.stepsSubject.value.map(step => ({\n      ...step,\n      status: 'pending' as const,\n      progress: undefined,\n      metadata: undefined\n    }));\n    \n    this.stepsSubject.next(resetSteps);\n  }\n\n  /**\n   * Gets the CSS class for a step based on its status\n   * @param step The step to get class for\n   * @returns CSS class name\n   */\n  getStepClass(step: ProcessStep): string {\n    switch (step.status) {\n      case 'completed':\n        return 'step-completed';\n      case 'active':\n        return 'step-active';\n      case 'error':\n        return 'step-error';\n      case 'pending':\n      default:\n        return 'step-pending';\n    }\n  }\n\n  /**\n   * Gets the CSS class for a connector between two steps\n   * @param fromStepId The starting step ID\n   * @param toStepId The ending step ID\n   * @returns CSS class name\n   */\n  getConnectorClass(fromStepId: string, toStepId: string): string {\n    const fromStep = this.getStep(fromStepId);\n    const toStep = this.getStep(toStepId);\n    \n    if (!fromStep || !toStep) return '';\n    \n    if (fromStep.status === 'completed' && (toStep.status === 'active' || toStep.status === 'completed')) {\n      return 'connector-completed';\n    }\n    if (fromStep.status === 'completed' || fromStep.status === 'active') {\n      return 'connector-active';\n    }\n    return '';\n  }\n}","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ProgressStepperService, ProcessStep } from '../../services/progress-stepper.service';\n\n@Component({\n  selector: 'app-progress-stepper',\n  templateUrl: './progress-stepper.component.html',\n  styleUrls: ['./progress-stepper.component.scss']\n})\nexport class ProgressStepperComponent implements OnInit, OnDestroy {\n  steps: ProcessStep[] = [];\n  private subscription: Subscription = new Subscription();\n\n  constructor(private stepperService: ProgressStepperService) { }\n\n  ngOnInit(): void {\n    this.subscription = this.stepperService.steps$.subscribe(steps => {\n      this.steps = steps;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Gets the CSS class for a step\n   * @param step The step to get class for\n   * @returns CSS class name\n   */\n  getStepClass(step: ProcessStep): string {\n    return this.stepperService.getStepClass(step);\n  }\n\n  /**\n   * Gets the CSS class for a connector between two steps\n   * @param fromIndex The starting step index\n   * @param toIndex The ending step index\n   * @returns CSS class name\n   */\n  getConnectorClass(fromIndex: number, toIndex: number): string {\n    if (fromIndex >= this.steps.length - 1) return '';\n    \n    const fromStep = this.steps[fromIndex];\n    const toStep = this.steps[toIndex];\n    \n    return this.stepperService.getConnectorClass(fromStep.id, toStep.id);\n  }\n\n  /**\n   * Gets the step number for display\n   * @param index The step index\n   * @returns Step number (1-based)\n   */\n  getStepNumber(index: number): number {\n    return index + 1;\n  }\n\n  /**\n   * Checks if step should show progress percentage\n   * @param step The step to check\n   * @returns True if progress should be shown\n   */\n  shouldShowProgress(step: ProcessStep): boolean {\n    return step.status === 'active' && typeof step.progress === 'number';\n  }\n\n  /**\n   * Checks if step should show spinner\n   * @param step The step to check\n   * @returns True if spinner should be shown\n   */\n  shouldShowSpinner(step: ProcessStep): boolean {\n    return step.status === 'active' && typeof step.progress !== 'number';\n  }\n\n  /**\n   * Gets the formatted description for a step\n   * @param step The step\n   * @returns Formatted description\n   */\n  getStepDescription(step: ProcessStep): string {\n    if (this.shouldShowProgress(step)) {\n      return `${step.progress}% complete`;\n    }\n    return step.description;\n  }\n}","<div class=\"progress-stepper\">\n  <div *ngFor=\"let step of steps; let i = index\" class=\"step-container\">\n    <div class=\"step\" [class]=\"getStepClass(step)\">\n      <div class=\"step-indicator\">\n        <span class=\"step-number\" *ngIf=\"!shouldShowSpinner(step) && step.status !== 'completed'\">\n          {{ getStepNumber(i) }}\n        </span>\n        <span class=\"step-check\" *ngIf=\"step.status === 'completed'\">✓</span>\n        <span class=\"step-spinner\" *ngIf=\"shouldShowSpinner(step)\">⏳</span>\n        <span class=\"step-error\" *ngIf=\"step.status === 'error'\">✗</span>\n      </div>\n      <div class=\"step-content\">\n        <div class=\"step-title\">{{ step.title }}</div>\n        <div class=\"step-description\">{{ getStepDescription(step) }}</div>\n        <div class=\"step-metadata\" *ngIf=\"step.metadata\">\n          <div *ngIf=\"step.metadata.count\" class=\"metadata-item\">\n            {{ step.metadata.count }} items\n          </div>\n          <div *ngIf=\"step.metadata.fileName\" class=\"metadata-item\">\n            {{ step.metadata.fileName }}\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Connector to next step -->\n    <div \n      *ngIf=\"i < steps.length - 1\" \n      class=\"step-connector\" \n      [class]=\"getConnectorClass(i, i + 1)\">\n    </div>\n  </div>\n</div>","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-nested-object-viewer',\n  templateUrl: './nested-object-viewer.component.html',\n  styleUrls: ['./nested-object-viewer.component.scss']\n})\nexport class NestedObjectViewerComponent {\n  @Input() data: any = null;\n  @Input() path: string = '';\n  @Input() expandedSections: Set<string> = new Set();\n  @Input() onTogglePath: (path: string) => void = () => {};\n\n  Array = Array;\n  JSON = JSON;\n\n  /**\n   * Gets the type of a value for display purposes\n   */\n  getValueType(value: any): string {\n    if (value === null) return 'null';\n    if (value === undefined) return 'undefined';\n    if (Array.isArray(value)) return 'array';\n    if (typeof value === 'object') return 'object';\n    return typeof value;\n  }\n\n  /**\n   * Checks if a value is expandable (object or array)\n   */\n  isExpandable(value: any): boolean {\n    return value !== null && \n           value !== undefined && \n           (typeof value === 'object' || Array.isArray(value));\n  }\n\n  /**\n   * Gets the display value for a primitive type\n   */\n  getDisplayValue(value: any): string {\n    if (value === null) return 'null';\n    if (value === undefined) return 'undefined';\n    if (typeof value === 'string') return `\"${value}\"`;\n    if (typeof value === 'boolean') return value.toString();\n    if (typeof value === 'number') return value.toString();\n    return JSON.stringify(value);\n  }\n\n  /**\n   * Gets the object keys for iteration\n   */\n  getObjectKeys(obj: any): string[] {\n    if (!obj || typeof obj !== 'object') return [];\n    return Object.keys(obj);\n  }\n\n  /**\n   * Gets the array length for display\n   */\n  getArrayLength(arr: any[]): number {\n    return Array.isArray(arr) ? arr.length : 0;\n  }\n\n  /**\n   * Checks if a value is an object (not array)\n   */\n  isObject(value: any): boolean {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n  }\n\n  /**\n   * Checks if a value is an array\n   */\n  isArray(value: any): boolean {\n    return Array.isArray(value);\n  }\n\n  /**\n   * Formats a key for display\n   */\n  formatKey(key: string): string {\n    return key.replace(/([A-Z])/g, ' $1')\n              .replace(/^./, str => str.toUpperCase())\n              .trim();\n  }\n\n  /**\n   * Gets the full path for a nested key\n   */\n  getFullPath(key: string): string {\n    return this.path ? `${this.path}.${key}` : key;\n  }\n\n  /**\n   * Checks if a path is expanded\n   */\n  isPathExpanded(path: string): boolean {\n    return this.expandedSections.has(path);\n  }\n\n  /**\n   * Toggles a path's expanded state\n   */\n  togglePath(path: string): void {\n    this.onTogglePath(path);\n  }\n\n  /**\n   * Copies a value to the clipboard\n   */\n  async copyToClipboard(value: any, key: string): Promise<void> {\n    try {\n      const textToCopy = typeof value === 'string' ? value : JSON.stringify(value, null, 2);\n      await navigator.clipboard.writeText(textToCopy);\n      \n      // Show a brief success indication (you could enhance this with a toast notification)\n      console.log(`Copied ${key} to clipboard:`, textToCopy);\n    } catch (err) {\n      console.error('Failed to copy to clipboard:', err);\n      // Fallback for older browsers\n      this.fallbackCopyToClipboard(typeof value === 'string' ? value : JSON.stringify(value, null, 2));\n    }\n  }\n\n  /**\n   * Fallback copy method for browsers that don't support navigator.clipboard\n   */\n  private fallbackCopyToClipboard(text: string): void {\n    const textArea = document.createElement('textarea');\n    textArea.value = text;\n    textArea.style.position = 'fixed';\n    textArea.style.left = '-999999px';\n    textArea.style.top = '-999999px';\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n    \n    try {\n      document.execCommand('copy');\n      console.log('Fallback: Text copied to clipboard');\n    } catch (err) {\n      console.error('Fallback: Failed to copy text to clipboard', err);\n    }\n    \n    document.body.removeChild(textArea);\n  }\n} ","<div class=\"nested-object-viewer\">\n  <div \n    *ngFor=\"let key of getObjectKeys(data)\"\n    class=\"nested-item\"\n  >\n    <!-- Section Header -->\n    <div \n      class=\"section-header\"\n      [class.expanded]=\"isPathExpanded(getFullPath(key))\"\n      (click)=\"togglePath(getFullPath(key))\"\n    >\n      <div class=\"section-info\">\n        <span class=\"expand-icon\">{{ isPathExpanded(getFullPath(key)) ? '▼' : '▶' }}</span>\n        <span class=\"section-key\">{{ formatKey(key) }}</span>\n        <span class=\"section-type\">({{ getValueType(data[key]) }})</span>\n        <span class=\"section-count\" *ngIf=\"isArray(data[key])\">\n          [{{ getArrayLength(data[key]) }} items]\n        </span>\n        <span class=\"section-count\" *ngIf=\"isObject(data[key])\">\n          [{{ getObjectKeys(data[key]).length }} keys]\n        </span>\n      </div>\n    </div>\n\n    <!-- Section Content -->\n    <div \n      class=\"section-content\"\n      *ngIf=\"isPathExpanded(getFullPath(key))\"\n    >\n      <div class=\"content-wrapper\">\n        <!-- Object Content -->\n        <div \n          *ngIf=\"isObject(data[key])\"\n          class=\"object-content\"\n        >\n          <div \n            *ngFor=\"let subKey of getObjectKeys(data[key])\"\n            class=\"sub-item\"\n          >\n            <div class=\"sub-key\">{{ subKey }}:</div>\n            <div class=\"sub-value\">\n              <span \n                *ngIf=\"!isExpandable(data[key][subKey])\"\n                class=\"primitive-value\"\n              >\n                {{ getDisplayValue(data[key][subKey]) }}\n              </span>\n              <span \n                *ngIf=\"isExpandable(data[key][subKey])\"\n                class=\"expandable-value\"\n              >\n                {{ getValueType(data[key][subKey]) }}\n                <span *ngIf=\"isArray(data[key][subKey])\">\n                  [{{ getArrayLength(data[key][subKey]) }}]\n                </span>\n                <span *ngIf=\"isObject(data[key][subKey])\">\n                  [{{ getObjectKeys(data[key][subKey]).length }}]\n                </span>\n              </span>\n            </div>\n            <button \n              class=\"copy-btn\"\n              (click)=\"copyToClipboard(data[key][subKey], subKey)\"\n              title=\"Copy value to clipboard\"\n            >\n              📋\n            </button>\n          </div>\n        </div>\n\n        <!-- Array Content -->\n        <div \n          *ngIf=\"isArray(data[key])\"\n          class=\"array-content\"\n        >\n          <div \n            *ngFor=\"let item of data[key]; let i = index\"\n            class=\"array-item\"\n          >\n            <div class=\"array-index\">[{{ i }}]:</div>\n            <div class=\"array-value\">\n              <span \n                *ngIf=\"!isExpandable(item)\"\n                class=\"primitive-value\"\n              >\n                {{ getDisplayValue(item) }}\n              </span>\n              <span \n                *ngIf=\"isExpandable(item)\"\n                class=\"expandable-value\"\n              >\n                {{ getValueType(item) }}\n                <span *ngIf=\"isArray(item)\">\n                  [{{ getArrayLength(item) }}]\n                </span>\n                <span *ngIf=\"isObject(item)\">\n                  [{{ getObjectKeys(item).length }}]\n                </span>\n              </span>\n            </div>\n            <button \n              class=\"copy-btn\"\n              (click)=\"copyToClipboard(item, '[' + i + ']')\"\n              title=\"Copy value to clipboard\"\n            >\n              📋\n            </button>\n          </div>\n        </div>\n\n        <!-- Primitive Content -->\n        <div \n          *ngIf=\"!isExpandable(data[key])\"\n          class=\"primitive-content\"\n        >\n          <span class=\"primitive-value\">\n            {{ getDisplayValue(data[key]) }}\n          </span>\n          <button \n            class=\"copy-btn\"\n            (click)=\"copyToClipboard(data[key], key)\"\n            title=\"Copy value to clipboard\"\n          >\n            📋\n          </button>\n        </div>\n\n        <!-- Recursive Nested Objects -->\n        <div \n          *ngIf=\"isExpandable(data[key])\"\n          class=\"nested-content\"\n        >\n          <app-nested-object-viewer\n            [data]=\"data[key]\"\n            [path]=\"getFullPath(key)\"\n            [expandedSections]=\"expandedSections\"\n            [onTogglePath]=\"onTogglePath\"\n          ></app-nested-object-viewer>\n        </div>\n      </div>\n    </div>\n  </div>\n</div> ","import { Component, OnInit, Input } from '@angular/core';\nimport { ConfigData } from '../services/document-extract.service';\n\n@Component({\n  selector: 'app-system-configuration',\n  templateUrl: './system-configuration.component.html',\n  styleUrls: ['./system-configuration.component.scss']\n})\nexport class SystemConfigurationComponent implements OnInit {\n  @Input() configData: ConfigData | null = null;\n  \n  loading = false;\n  error: string | null = null;\n  expandedSections: Set<string> = new Set();\n  Array = Array; // Make Array available in template\n  JSON = JSON; // Make JSON available in template\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  /**\n   * Toggles the expanded state of a section\n   * @param sectionKey The key of the section to toggle\n   */\n  toggleSection(sectionKey: string): void {\n    this.togglePath(sectionKey);\n  }\n\n  /**\n   * Checks if a section is expanded\n   * @param sectionKey The key of the section to check\n   * @returns True if the section is expanded\n   */\n  isSectionExpanded(sectionKey: string): boolean {\n    return this.isPathExpanded(sectionKey);\n  }\n\n  /**\n   * Gets the type of a value for display purposes\n   * @param value The value to check\n   * @returns The type string\n   */\n  getValueType(value: any): string {\n    if (value === null) return 'null';\n    if (value === undefined) return 'undefined';\n    if (Array.isArray(value)) return 'array';\n    if (typeof value === 'object') return 'object';\n    return typeof value;\n  }\n\n  /**\n   * Checks if a value is expandable (object or array)\n   * @param value The value to check\n   * @returns True if the value is expandable\n   */\n  isExpandable(value: any): boolean {\n    return value !== null && \n           value !== undefined && \n           (typeof value === 'object' || Array.isArray(value));\n  }\n\n  /**\n   * Gets the display value for a primitive type\n   * @param value The value to format\n   * @returns Formatted string\n   */\n  getDisplayValue(value: any): string {\n    if (value === null) return 'null';\n    if (value === undefined) return 'undefined';\n    if (typeof value === 'string') return `\"${value}\"`;\n    if (typeof value === 'boolean') return value.toString();\n    if (typeof value === 'number') return value.toString();\n    return JSON.stringify(value);\n  }\n\n  /**\n   * Gets the object keys for iteration\n   * @param obj The object to get keys from\n   * @returns Array of keys\n   */\n  getObjectKeys(obj: any): string[] {\n    if (!obj || typeof obj !== 'object') return [];\n    return Object.keys(obj);\n  }\n\n  /**\n   * Gets the array length for display\n   * @param arr The array to check\n   * @returns The length of the array\n   */\n  getArrayLength(arr: any[]): number {\n    return Array.isArray(arr) ? arr.length : 0;\n  }\n\n  /**\n   * Formats a key for display\n   * @param key The key to format\n   * @returns Formatted key string\n   */\n  formatKey(key: string): string {\n    return key.replace(/([A-Z])/g, ' $1')\n              .replace(/^./, str => str.toUpperCase())\n              .trim();\n  }\n\n  /**\n   * Checks if a value is an object (not array)\n   * @param value The value to check\n   * @returns True if the value is an object\n   */\n  isObject(value: any): boolean {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n  }\n\n  /**\n   * Checks if a value is an array\n   * @param value The value to check\n   * @returns True if the value is an array\n   */\n  isArray(value: any): boolean {\n    return Array.isArray(value);\n  }\n\n  /**\n   * Expands all sections\n   */\n  expandAll(): void {\n    if (this.configData) {\n      this.expandedSections.clear();\n      this.expandAllRecursive(this.configData, '');\n    }\n  }\n\n  /**\n   * Recursively expands all nested objects and arrays\n   * @param obj The object to expand\n   * @param path The current path for generating unique keys\n   */\n  expandAllRecursive(obj: any, path: string): void {\n    if (!obj || typeof obj !== 'object') return;\n    \n    const keys = this.getObjectKeys(obj);\n    keys.forEach(key => {\n      const fullPath = path ? `${path}.${key}` : key;\n      this.expandedSections.add(fullPath);\n      \n      // Recursively expand nested objects and arrays\n      if (this.isExpandable(obj[key])) {\n        this.expandAllRecursive(obj[key], fullPath);\n      }\n    });\n  }\n\n\n  /**\n   * Checks if a path is expanded\n   * @param path The path to check\n   * @returns True if the path is expanded\n   */\n  isPathExpanded(path: string): boolean {\n    return this.expandedSections.has(path);\n  }\n\n  /**\n   * Toggles a path's expanded state\n   * @param path The path to toggle\n   */\n  togglePath(path: string): void {\n    if (this.expandedSections.has(path)) {\n      this.expandedSections.delete(path);\n    } else {\n      this.expandedSections.add(path);\n    }\n  }\n} ","<div class=\"system-configuration-container\">\n  <div class=\"config-header\">\n    <h3>System Configuration</h3>\n    <div class=\"config-status\">\n      <span class=\"status-indicator\" [class.loaded]=\"configData\"></span>\n      <span class=\"status-text\">{{ configData ? 'Configuration Loaded' : 'No Configuration' }}</span>\n    </div>\n  </div>\n\n  <div class=\"config-content\" *ngIf=\"configData\">\n    <div class=\"config-overview\">\n      <div class=\"overview-stats\">\n        <div class=\"stat-item\">\n          <span class=\"stat-label\">Configuration Size:</span>\n          <span class=\"stat-value\">{{ JSON.stringify(configData).length }} characters</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-label\">Top Level Keys:</span>\n          <span class=\"stat-value\">{{ getObjectKeys(configData).length }}</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"json-viewer\">\n      <div class=\"viewer-header\">\n        <h4>Configuration Structure</h4>\n        <div class=\"viewer-controls\">\n          <button \n            class=\"btn btn-outline\"\n            (click)=\"expandedSections.clear()\"\n          >\n            Collapse All\n          </button>\n          <button \n            class=\"btn btn-outline\"\n            (click)=\"expandAll()\"\n          >\n            Expand All\n          </button>\n        </div>\n      </div>\n\n            <div class=\"json-content\">\n        <app-nested-object-viewer\n          [data]=\"configData\"\n          [path]=\"''\"\n          [expandedSections]=\"expandedSections\"\n          [onTogglePath]=\"togglePath.bind(this)\"\n        ></app-nested-object-viewer>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"no-config\" *ngIf=\"!configData\">\n    <div class=\"no-config-content\">\n      <div class=\"no-config-icon\">⚙️</div>\n      <h4>No Configuration Available</h4>\n      <p>Configuration data will appear here once loaded from the service.</p>\n    </div>\n  </div>\n</div> ","import { buildVersion, packageVersion, gitBranch } from '../app/version';\n\nexport const environment = {\n    appVersion: buildVersion,\n    packageVersion: packageVersion,\n    gitBranch: gitBranch,\n    production: false\n  };\n  ","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","// Auto-generated build version file\n// Generated on: 2025-07-14T11:58:34.693Z\nexport const buildVersion = 'v0.0.115-cpdi';\nexport const packageVersion = '0.0.115';\nexport const gitBranch = 'cpdi';\n"],"names":["RouterModule","routes","AppRoutingModule","_","_2","_3","forRoot","useHash","imports","i1","exports","DocumentTrackingComponent","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","AppComponent","constructor","activatedRoute","mPage","documentService","progressStepper","loading","configLoaded","configData","showBackToTop","patientInfo","ngOnInit","queryParams","subscribe","params","personId","parseInt","encntrId","prsnlId","setTimeout","e","setMaxInstances","waitForServiceReady","setupBackToTop","_this","_asyncToGenerator","serviceReady","Promise","resolve","console","log","loadConfiguration","updateStep","undefined","getConfigData","next","error","window","addEventListener","pageYOffset","scrollToTop","scrollTo","top","behavior","onPatientSelected","patientName","updateStepDescription","documents","length","count","onDownloadRequest","downloadData","dmsMediaInstanceRequests","documentTrackingComponent","handleDownloadRequest","ɵɵdirectiveInject","ActivatedRoute","i2","mPageService","i3","DocumentExtractService","i4","ProgressStepperService","selectors","viewQuery","AppComponent_Query","rf","ctx","ɵɵtemplate","AppComponent_div_5_Template","ɵɵlistener","AppComponent_Template_app_patient_selection_patientSelected_10_listener","$event","AppComponent_Template_app_document_list_downloadRequest_11_listener","AppComponent_Template_app_document_tracking_downloadRequest_12_listener","AppComponent_Template_div_click_14_listener","ɵɵadvance","ɵɵproperty","ɵɵclassProp","ɵɵpureFunction0","_c0","ErrorHandler","APP_INITIALIZER","BrowserModule","BrowserAnimationsModule","FormsModule","ReactiveFormsModule","ClinicalOfficeMpageModule","MaterialModule","ErrorHandlerService","ConfigService","MatLuxonDateModule","LuxonDateAdapter","DateAdapter","MAT_DATE_FORMATS","MAT_DATE_LOCALE","ComponentVersionComponent","PatientSelectionComponent","DocumentListComponent","SystemConfigurationComponent","NestedObjectViewerComponent","ExtractDownloadComponent","ProgressStepperComponent","NZ_I18N","en_US","registerLocaleData","en","HttpClientModule","configFactory","configService","loadConfig","CUSTOM_DATE_FORMATS","parse","dateInput","display","dateTimeLabel","monthYearLabel","dateA11yLabel","monthYearA11yLabel","AppModule","bootstrap","provide","useFactory","deps","multi","useClass","useValue","declarations","environment","currentApplicationVersion","appVersion","packageVersion","gitBranch","decls","vars","template","ComponentVersionComponent_Template","ɵɵtextInterpolate","EventEmitter","ɵɵtextInterpolate1","ctx_r0","ctx_r1","selectedDocuments","DocumentListComponent_div_7_Template_button_click_1_listener","ɵɵrestoreView","_r7","ctx_r6","ɵɵnextContext","ɵɵresetView","selectAll","DocumentListComponent_div_7_Template_button_click_3_listener","ctx_r8","deselectAll","DocumentListComponent_div_7_Template_button_click_5_listener","ctx_r9","downloadSelected","ctx_r2","allSelected","DocumentListComponent_div_10_div_13_Template_div_click_0_listener","restoredCtx","_r13","document_r11","$implicit","ctx_r12","toggleDocumentSelection","DocumentListComponent_div_10_div_13_Template_input_click_2_listener","stopPropagation","DocumentListComponent_div_10_div_13_Template_input_change_2_listener","ctx_r15","selected","documentName","contentTypeDisplay","ɵɵpipeBind2","documentDate","documentSize","DocumentListComponent_div_10_Template_input_change_3_listener","_r17","ctx_r16","DocumentListComponent_div_10_div_13_Template","ctx_r5","someSelected","documentSelectionChange","downloadRequest","document","index","findIndex","doc","id","splice","push","emit","forEach","dmsDocuments","filter","sourceType","cpdiDocuments","map","mediaInstanceId","cpdiDocumentRequests","eventId","blobHandle","contentUid","warn","inputs","outputs","consts","DocumentListComponent_Template","DocumentListComponent_span_5_Template","DocumentListComponent_span_6_Template","DocumentListComponent_div_7_Template","DocumentListComponent_div_8_Template","DocumentListComponent_div_9_Template","DocumentListComponent_div_10_Template","downloadQueue","completedDownloads","failedDownloads","ɵɵstyleProp","ctx_r3","getDownloadProgress","ɵɵtextInterpolate2","getCurrentDownloadStatus","item_r10","documentType","progress","DocumentTrackingComponent_div_12_div_5_span_7_Template","DocumentTrackingComponent_div_12_div_5_div_8_Template","ɵɵclassMap","getStatusClass","status","documentId","getStatusText","DocumentTrackingComponent_div_12_div_5_Template","ctx_r4","item_r16","filename","DocumentTrackingComponent_div_13_div_7_span_5_Template","DocumentTrackingComponent_div_13_Template_button_click_4_listener","_r20","ctx_r19","clearCompleted","DocumentTrackingComponent_div_13_div_7_Template","item_r22","DocumentTrackingComponent_div_14_div_7_span_5_Template","DocumentTrackingComponent_div_14_div_7_Template_button_click_7_listener","_r26","ctx_r25","retryDownload","DocumentTrackingComponent_div_14_Template_button_click_4_listener","_r28","ctx_r27","clearFailed","DocumentTrackingComponent_div_14_div_7_Template","DocumentTrackingComponent_div_15_Template_app_extract_download_extractComplete_1_listener","_r30","ctx_r29","handleExtractComplete","ctx_r7","currentPatient","downloadedFiles","isDownloading","showExtractComponent","startDownload","clearDownloadState","requestCount","requests","request","toString","downloadDocumentsSequentially","response","handleSequentialDownloadResponse","handleDownloadError","isComplete","allResults","current","queueItem","find","item","result","moveToCompleted","fullpath","downloadedFile","existingFile","file","message","moveToFailed","total","completed","failed","successRate","toFixed","downloadedFilesCount","extractResponse","success","fileName","zipFileName","existingItem","retryRequest","totalItems","completedItems","failedItems","Math","round","downloadingItems","pendingItems","downloadingItem","DocumentTrackingComponent_Template","DocumentTrackingComponent_span_6_Template","DocumentTrackingComponent_span_7_Template","DocumentTrackingComponent_span_8_Template","DocumentTrackingComponent_div_10_Template","DocumentTrackingComponent_div_12_Template","DocumentTrackingComponent_div_13_Template","DocumentTrackingComponent_div_14_Template","DocumentTrackingComponent_div_15_Template","DocumentTrackingComponent_div_16_Template","extractProgress","ExtractDownloadComponent_button_20_Template_button_click_0_listener","_r10","downloadWithMPagesAuth","ExtractDownloadComponent_div_21_div_4_span_1_Template","ExtractDownloadComponent_div_21_div_4_span_2_Template","ctx_r11","isMPageAuthAvailable","file_r15","ExtractDownloadComponent_div_21_div_4_Template","ExtractDownloadComponent_div_21_div_6_Template","shouldShowDownloadButton","trackByFilename","extractResult","extractInfo","fileCount","ctx_r17","metadataFile","ExtractDownloadComponent_div_22_div_6_Template","ExtractDownloadComponent_div_22_div_7_Template","extractComplete","isExtracting","extractStatus","startExtract","extractRequest","createExtract","handleExtractResponse","handleExtractError","downloadUrl","alert","xhr","XMLHttpRequest","open","responseType","authPromise","MPAGES_SVC_AUTH","downloadPromise","reject","onload","originalBlob","blob","Blob","type","toLowerCase","endsWith","size","url","URL","createObjectURL","link","createElement","href","download","saveWithFileSystemAPI","then","catch","body","appendChild","click","removeChild","revokeObjectURL","Error","onerror","send","suggestedName","handle","showSaveFilePicker","types","description","accept","writable","createWritable","write","close","name","getExtractButtonText","getExtractStatusText","getExtractStatusClass","isExtractButtonDisabled","zipFileUrl","getDownloadButtonText","downloadWithFileTransfer","nodeName","downloadExtractFile","downloadFileName","zipBlob","style","shouldShowFileTransferButton","ExtractDownloadComponent_Template","ExtractDownloadComponent_span_9_Template","ExtractDownloadComponent_span_10_Template","ExtractDownloadComponent_span_11_Template","ExtractDownloadComponent_span_12_Template","ExtractDownloadComponent_div_16_Template","ExtractDownloadComponent_Template_button_click_18_listener","ExtractDownloadComponent_button_20_Template","ExtractDownloadComponent_div_21_Template","ExtractDownloadComponent_div_22_Template","ExtractDownloadComponent_div_23_Template","Validators","PatientSelectionComponent_div_10_span_1_Template","PatientSelectionComponent_div_10_span_2_Template","tmp_0_0","patientForm","get","errors","tmp_1_0","errorMessage","patient_r10","dischDtTm","PatientSelectionComponent_div_18_div_4_Template_div_click_0_listener","_r14","ctx_r13","selectPatient","PatientSelectionComponent_div_18_div_4_span_30_Template","fin","mrn","dateOfBirth","sex","facility","unit","encntrType","medService","regDtTm","arrivalDtTm","getTime","PatientSelectionComponent_div_18_div_4_Template","patientSearchResults","PatientSelectionComponent_div_19_Template_button_click_5_listener","_r18","openChart","PatientSelectionComponent_div_19_Template_button_click_9_listener","openMultimediaManager","PatientSelectionComponent_div_19_div_72_Template","PatientSelectionComponent_div_19_div_78_Template","fb","cernerActionService","patientSelected","showPatientSelection","group","required","minLength","onSubmit","valid","value","searchPatients","patients","patient","getPatientDocuments","resetForm","reset","FormBuilder","CernerActionService","PatientSelectionComponent_Template","PatientSelectionComponent_div_4_Template","PatientSelectionComponent_Template_form_ngSubmit_5_listener","PatientSelectionComponent_div_10_Template","PatientSelectionComponent_span_13_Template","PatientSelectionComponent_span_14_Template","PatientSelectionComponent_Template_button_click_15_listener","PatientSelectionComponent_div_17_Template","PatientSelectionComponent_div_18_Template","PatientSelectionComponent_div_19_Template","tmp_3_0","invalid","touched","tmp_5_0","el","getElementById","CernerAction","action","data","orderId","viewOrderAsync","putLog","viewAppointmentAsync","modifyOrderAsync","_this2","orderInfoViewer","external","DiscernObjectFactory","LaunchOrderInfoViewer","actionType","_this3","parseFloat","schEventId","scheduleId","schedulingActions","ShowView","ShowHistoryView","_this4","orderLst","customizeFlags","enablePowerPlans","tabLst","defaultDisplay","silentSignFlag","silentSign","parameters","mpagesEventCall","ɵɵinject","factory","ɵfac","providedIn","Observable","customService","observer","load","customScript","script","run","requestType","requestData","clearPatientSource","raw","complete","JSON","stringify","chs_document_extract_svc_request","mapToPatientSearchResults","mapToPatientInfo","downloadDocuments","dmsMediaInstanceIds","downloadResponse","parseDownloadResponse","downloadSingleDocument","dmsMediaInstanceRequest","dmsMediaInstanceId","downloadResult","parseDownloadSingleDocumentResponse","results","currentIndex","processNext","currentRequest","parseExtractResponse","qual","Array","isArray","nameFullFormatted","dob","parseDate","Date","dateStr","months","parts","split","day","month","year","isNaN","patientQual","dmsQual","createdDtTm","formatFileSize","contentSize","contentTypeKey","contentTypeDescription","identifier","mediaType","appCtx","mediaObjectIdentifier","parentEntityName","parentEntityId","cpdiQual","eventTitleText","eventEndDtTm","bytes","k","sizes","i","floor","pow","downloadDocuments_reply","downloadResults","contentType","dmsItem","isSuccess","downloadedInd","CAMM_DOWNLOAD_RESPONSE","FULLPATH","MESSAGE","downloadSingleDocument_reply","reply","statusData","zipFilename","text","metadataFilename","zipCammIdentifier","createExtract_reply","getLoadedConfigData","getSystemCredentials","credentials","username","password","systemCredentials_reply","currentHost","location","host","protocol","formData","FormData","append","setupAuth","_ref","toPromise","authString","credentials_b64","btoa","setRequestHeader","credError","authError","apply","arguments","CustomService","BehaviorSubject","stepsSubject","title","steps$","asObservable","stepId","metadata","currentSteps","stepIndex","step","updatedSteps","getCurrentSteps","getStep","resetAllSteps","resetSteps","getStepClass","getConnectorClass","fromStepId","toStepId","fromStep","toStep","Subscription","getStepNumber","i_r2","step_r1","ProgressStepperComponent_div_1_div_12_div_1_Template","ProgressStepperComponent_div_1_div_12_div_2_Template","ProgressStepperComponent_div_1_span_3_Template","ProgressStepperComponent_div_1_span_4_Template","ProgressStepperComponent_div_1_span_5_Template","ProgressStepperComponent_div_1_span_6_Template","ProgressStepperComponent_div_1_div_12_Template","ProgressStepperComponent_div_1_div_13_Template","shouldShowSpinner","getStepDescription","steps","stepperService","subscription","ngOnDestroy","unsubscribe","fromIndex","toIndex","shouldShowProgress","ProgressStepperComponent_Template","ProgressStepperComponent_div_1_Template","getArrayLength","key_r1","getObjectKeys","getDisplayValue","subKey_r12","ctx_r18","NestedObjectViewerComponent_div_1_div_11_div_2_div_1_span_5_span_2_Template","NestedObjectViewerComponent_div_1_div_11_div_2_div_1_span_5_span_3_Template","ctx_r14","getValueType","isObject","NestedObjectViewerComponent_div_1_div_11_div_2_div_1_span_4_Template","NestedObjectViewerComponent_div_1_div_11_div_2_div_1_span_5_Template","NestedObjectViewerComponent_div_1_div_11_div_2_div_1_Template_button_click_6_listener","copyToClipboard","isExpandable","NestedObjectViewerComponent_div_1_div_11_div_2_div_1_Template","ctx_r33","item_r31","ctx_r36","ctx_r37","NestedObjectViewerComponent_div_1_div_11_div_3_div_1_span_5_span_2_Template","NestedObjectViewerComponent_div_1_div_11_div_3_div_1_span_5_span_3_Template","ctx_r34","NestedObjectViewerComponent_div_1_div_11_div_3_div_1_span_4_Template","NestedObjectViewerComponent_div_1_div_11_div_3_div_1_span_5_Template","NestedObjectViewerComponent_div_1_div_11_div_3_div_1_Template_button_click_6_listener","_r42","i_r32","ctx_r41","ctx_r30","NestedObjectViewerComponent_div_1_div_11_div_3_div_1_Template","NestedObjectViewerComponent_div_1_div_11_div_4_Template_button_click_3_listener","_r45","ctx_r44","ctx_r10","getFullPath","expandedSections","onTogglePath","NestedObjectViewerComponent_div_1_div_11_div_2_Template","NestedObjectViewerComponent_div_1_div_11_div_3_Template","NestedObjectViewerComponent_div_1_div_11_div_4_Template","NestedObjectViewerComponent_div_1_div_11_div_5_Template","NestedObjectViewerComponent_div_1_Template_div_click_1_listener","_r51","ctx_r50","togglePath","NestedObjectViewerComponent_div_1_span_9_Template","NestedObjectViewerComponent_div_1_span_10_Template","NestedObjectViewerComponent_div_1_div_11_Template","isPathExpanded","formatKey","path","Set","obj","Object","keys","arr","key","replace","str","toUpperCase","trim","has","textToCopy","navigator","clipboard","writeText","err","fallbackCopyToClipboard","textArea","position","left","focus","select","execCommand","NestedObjectViewerComponent_Template","NestedObjectViewerComponent_div_1_Template","styles","SystemConfigurationComponent_div_8_Template_button_click_18_listener","_r3","clear","SystemConfigurationComponent_div_8_Template_button_click_20_listener","expandAll","bind","toggleSection","sectionKey","isSectionExpanded","expandAllRecursive","fullPath","add","delete","SystemConfigurationComponent_Template","SystemConfigurationComponent_div_8_Template","SystemConfigurationComponent_div_9_Template","buildVersion","production","__NgCli_bootstrap_1","platformBrowser","bootstrapModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}